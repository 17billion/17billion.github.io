<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-16T00:11:30+09:00</updated><id>http://localhost:4000/</id><title type="html">17billion</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Linux : Dirty Page Parameters</title><link href="http://localhost:4000/linux/2017/08/16/linux_dirty_cache_paramater.html" rel="alternate" type="text/html" title="Linux : Dirty Page Parameters" /><published>2017-08-16T09:51:42+09:00</published><updated>2017-08-16T09:51:42+09:00</updated><id>http://localhost:4000/linux/2017/08/16/linux_dirty_cache_paramater</id><content type="html" xml:base="http://localhost:4000/linux/2017/08/16/linux_dirty_cache_paramater.html">&lt;h3 id=&quot;dirty-page-란-링크&quot;&gt;&lt;a href=&quot;/linux/2017/08/10/linux_page_cache_dirty_page.html&quot;&gt;Dirty Page 란 (링크)&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;dirty-page-parameters-참고링크-&quot;&gt;Dirty Page Parameters (&lt;a href=&quot;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&quot;&gt;참고링크&lt;/a&gt;) &lt;br /&gt;&lt;/h4&gt;
&lt;p&gt;(ubuntu 14.04, Kernal 4.2.0-27-generic 기준)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ sysctl -a | grep dirty&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vm.dirty_background_bytes = 0
vm.dirty_background_ratio = 10
vm.dirty_bytes = 0
vm.dirty_expire_centisecs = 3000
vm.dirty_ratio = 20
vm.dirty_writeback_centisecs = 500
vm.dirtytime_expire_seconds = 43200
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;vm.dirty_background_bytes : 해당 임계치 사이즈(bytes)까지 dirty page가 도달하게 될 경우 flusher threads가 writeback을 진행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vm.dirty_background_ratio : 사용가능한 총 메모리에서의 백분율로 해당 임계치 백분율까지 dirty page가 도달하게 될 경우 flusher threads가 writeback을 진행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vm.dirty_bytes : 메모리에 flushing 되기 전 dirty page로 채울 수 있는 최대 값 (bytes)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vm.dirty_expire_centisecs :  flushing 전 dirty page에 있을 수 있는 기간.  flusher threads가 writeback을 진행하면 더티 페이지가 얼마나 오래된 지 확인하고, 이 값보다 오래된 경우 디스크에 비동기 적으로 기록 (메모리에 더티 페이지를 보유하는 것이 안전하지 않기 때문에 이는 데이터 손실에 대한 보호 장치이기도 함)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;vm.dirty_ratio : 메모리에 flushing 되기 전 dirty page로 채울 수있는 시스템 메모리의 최대 백분율(%)
    &lt;ul&gt;
      &lt;li&gt;설정(dirty_ratio)보다 많은 dirty page를 지속적으로 사용하게 되면 linux에서는 flushing을 정상적으로 수행하지 못하는 것으로 판단하고 write를 중지함, 거기에 높은 load average까지 발생시킴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vm.dirty_writeback_centisecs : pdflush/flush/kdmflush 프로세스가 깨어나고 작업이 완료되어야하는지 확인하는 빈도 (500 &amp;gt; 5초)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;vm.dirtytime_expire_seconds : dirty time 만료되는 시간 조정하는 파라메터 (http://lists.ceph.com/pipermail/ceph-commit-ceph.com/2015-April/000083.html)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※ &lt;a href=&quot;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&quot;&gt;_bytes 버전을 설정하면 _ratio 버전은 0이되고 그 반대의 경우도 마찬가지임&lt;/a&gt;   &lt;br /&gt;
※ &lt;a href=&quot;https://lwn.net/Articles/216853/&quot;&gt;dirty_ratio보다 dirty_backround_ratio 수치가 클 경우 자동으로 dirty_backround_ratio = dirty_ratio / 2로 설정 &lt;/a&gt;  &lt;br /&gt;
※ dirty_ratio, background_ratio의 수치는 사용가능한 총 메모리에서의 백분율로 계산 (&lt;a href=&quot;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&quot;&gt;시스템 총 메모리와 동일하지 않음&lt;/a&gt;)  &lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ratio = dirty / MemAvailable * 100 ($ cat /proc/meminfo) &lt;br /&gt;
(MemAvailable이 없을 경우 : &lt;a href=&quot;https://www.reddit.com/r/linux/comments/3h7w8f/better_linux_disk_caching_performance_with/&quot;&gt;이용 가능한 메모리 = (MemFree + Cached - Mapped)&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;※ parameter 변경 및 적용방법
예) dirty_ratio, dirty_background_ratio
1) 설정 변경
$ sudo sysctl -w vm.dirty_ratio=10
$ sudo sysctl -w vm.dirty_background_ratio=5
2) 변경내용 적용 (커밋)
$ sudo sysctl -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;참고 사이트
kernel.org : &lt;a href=&quot;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&quot;&gt;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&lt;/a&gt; &lt;br /&gt;
lists.ceph.com : &lt;a href=&quot;http://lists.ceph.com/pipermail/ceph-commit-ceph.com/2015-April/000083.html&quot;&gt;http://lists.ceph.com/pipermail/ceph-commit-ceph.com/2015-April/000083.html&lt;/a&gt; &lt;br /&gt;
lwn.net : &lt;a href=&quot;https://lwn.net/Articles/216853/&quot;&gt;https://lwn.net/Articles/216853/&lt;/a&gt; &lt;br /&gt;
reddit : &lt;a href=&quot;https://www.reddit.com/r/linux/comments/3h7w8f/better_linux_disk_caching_performance_with/&quot;&gt;https://www.reddit.com/r/linux/comments/3h7w8f/better_linux_disk_caching_performance_with/&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="linux" /><summary type="html">Dirty Page 란 (링크)</summary></entry><entry><title type="html">Linux : Page Cache, Dirty Page</title><link href="http://localhost:4000/linux/2017/08/10/linux_page_cache_dirty_page.html" rel="alternate" type="text/html" title="Linux : Page Cache, Dirty Page" /><published>2017-08-10T09:51:42+09:00</published><updated>2017-08-10T09:51:42+09:00</updated><id>http://localhost:4000/linux/2017/08/10/linux_page_cache_dirty_page</id><content type="html" xml:base="http://localhost:4000/linux/2017/08/10/linux_page_cache_dirty_page.html">&lt;h3 id=&quot;1-page-cache란--cat-procmeminfo의-cached&quot;&gt;1. Page Cache란 ($ cat /proc/meminfo의 Cached)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.linux-tutorial.info/modules.php?name=MContent&amp;amp;pageid=310&quot;&gt;Linux Page Cache의 역할은 디스크의 파일에 대한 액세스 속도를 향상시키기 위함&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://unixadminschool.com/blog/2013/10/rhel-6-controlling-cache-memory-page-cache-size/&quot;&gt;Write back 방식에서 page cache는 사용자 프로세스가 읽기 또는 쓰기를 시작할 때마다 사용되며 커널은 사용자가 작업중인 파일의 사본을 찾으며 그러한 사본이없는 경우 캐시 메모리의 한 페이지를 새로 할당하고 디스크에서 읽은 해당 내용을 적재&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;page cache는 linux에서 유동적으로 할당됨 (&lt;a href=&quot;https://www.kernel.org/doc/gorman/html/understand/understand009.html&quot;&gt;Physical Page Allocation&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;임의적으로 disable 할 수 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-dirty-page란--cat-procmeminfo의-dirty&quot;&gt;2. Dirty Page란 ($ cat /proc/meminfo의 Dirty)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;읽은 파일이 디스크에 업데이트 되지 않고 page cache 내 특정 공간에만 업데이트 되어 있는 경우가 있는데 이때 그 특정 공간을 dirty page라고 함&lt;/li&gt;
  &lt;li&gt;dirty page의 내용들은 page cache의 효율화를 위해 정해진 설정을 통해 주기적으로 디스크에 적재되고 dirty 공간을 비우게 되는데 이를 flushing이라고 함
    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;http://unixadminschool.com/blog/2013/10/rhel-6-controlling-cache-memory-page-cache-size/&quot;&gt;dflush (kernel version 2.6.31까지), flush (커널 버전 2.6.32 이상)&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;설정(dirty_ratio)보다 많은 dirty page를 지속적으로 사용하게 되면 linux에서는 flushing을 정상적으로 수행하지 못하는 것으로 판단하고 write를 중지. 거기에 상태 D 프로세스 증가시키며 높은 load average까지 발생시킴 &lt;br /&gt;
  ※ 이때 커널 로그(/var/log/kern.log)에서는 아래와 같은 로그가 발생&lt;br /&gt;
      &lt;code class=&quot;highlighter-rouge&quot;&gt;
      INFO: task {process}:{port} blocked for more than 120 seconds.
      &quot;echo 0 &amp;gt; /proc/sys/kernel/hung_task_timeout_secs&quot; disables this message.
     &lt;/code&gt;			  	
      &lt;br /&gt;- hung_task.c 이 코드에 의하면 위는 state D 상태에 머물러 있는 작업을 감지하는 커널스래드이며 위 로그는 해당 작업이 D 상태로 머물러 있다는 의미 &lt;br /&gt;
      - 아래처럼 튜닝을 해주면 해결되는 경우가 있음 (&lt;a href=&quot;https://www.blackmoreops.com/2014/09/22/linux-kernel-panic-issue-fix-hung_task_timeout_secs-blocked-120-seconds-problem/&quot;&gt;참고 사이트&lt;/a&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo sysctl -w vm.dirty_ratio=10  &lt;br /&gt;
$ sudo sysctl -w vm.dirty_background_ratio=5  &lt;br /&gt;
$ sudo sysctl -p  &lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
linux-tutorial.info : &lt;a href=&quot;http://www.linux-tutorial.info/modules.php?name=MContent&amp;amp;pageid=310&quot;&gt;http://www.linux-tutorial.info/modules.php?name=MContent&amp;amp;pageid=310&lt;/a&gt; &lt;br /&gt;
unixadminschool.com : &lt;a href=&quot;http://unixadminschool.com/blog/2013/10/rhel-6-controlling-cache-memory-page-cache-size/&quot;&gt;http://unixadminschool.com/blog/2013/10/rhel-6-controlling-cache-memory-page-cache-size/&lt;/a&gt; &lt;br /&gt;
kernel.org(1) : &lt;a href=&quot;https://www.kernel.org/doc/gorman/html/understand/understand009.html&quot;&gt;https://www.kernel.org/doc/gorman/html/understand/understand009.html&lt;/a&gt; &lt;br /&gt;
kernel.org(2) : &lt;a href=&quot;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&quot;&gt;https://www.kernel.org/doc/Documentation/sysctl/vm.txt&lt;/a&gt; &lt;br /&gt;
www.blackmoreops.com : &lt;a href=&quot;https://www.blackmoreops.com/2014/09/22/linux-kernel-panic-issue-fix-hung_task_timeout_secs-blocked-120-seconds-problem/&quot;&gt;https://www.blackmoreops.com/2014/09/22/linux-kernel-panic-issue-fix-hung_task_timeout_secs-blocked-120-seconds-problem/&lt;/a&gt; &lt;br /&gt;
Linux Tuning The VM (memory) Subsystem : &lt;a href=&quot;https://www.cyberciti.biz/faq/linux-kernel-tuning-virtual-memory-subsystem/&quot;&gt;https://www.cyberciti.biz/faq/linux-kernel-tuning-virtual-memory-subsystem/&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="linux" /><summary type="html">1. Page Cache란 ($ cat /proc/meminfo의 Cached) Linux Page Cache의 역할은 디스크의 파일에 대한 액세스 속도를 향상시키기 위함 Write back 방식에서 page cache는 사용자 프로세스가 읽기 또는 쓰기를 시작할 때마다 사용되며 커널은 사용자가 작업중인 파일의 사본을 찾으며 그러한 사본이없는 경우 캐시 메모리의 한 페이지를 새로 할당하고 디스크에서 읽은 해당 내용을 적재 page cache는 linux에서 유동적으로 할당됨 (Physical Page Allocation) 임의적으로 disable 할 수 없음</summary></entry><entry><title type="html">퀵정렬 (quick Sort)</title><link href="http://localhost:4000/algorithm/2017/08/05/java_quick_sort.html" rel="alternate" type="text/html" title="퀵정렬 (quick Sort)" /><published>2017-08-05T09:51:42+09:00</published><updated>2017-08-05T09:51:42+09:00</updated><id>http://localhost:4000/algorithm/2017/08/05/java_quick_sort</id><content type="html" xml:base="http://localhost:4000/algorithm/2017/08/05/java_quick_sort.html">&lt;h4 id=&quot;시간복잡도-최선평균-nlog-n-최악-n2의-방법-quick-sort&quot;&gt;시간복잡도 최선/평균 n*log (n), 최악 n^2의 방법 Quick Sort&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif&quot; alt=&quot;Sorting_quicksort_anim&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;분할정복-알고리즘&quot;&gt;분할정복 알고리즘&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;리스트 가운데서 하나의 값을 선택하여 피봇(p)으로 지정&lt;/li&gt;
  &lt;li&gt;피봇 앞에는 피봇보다 값이 작은 모든 값들을 위치, 피봇 뒤에는 피봇보다 값이 큰 모든 값들을 위치시켜 피봇을 기준으로 리스트를 둘로 분할&lt;/li&gt;
  &lt;li&gt;분할된 두 개의 작은 리스트에 대해 재귀(Recursion)적으로 이 과정을 반복. 재귀는 리스트의 크기가 0이나 1이 될 때까지 반복&lt;/li&gt;
  &lt;li&gt;재귀 호출이 한번 진행될 때마다 최소한 하나의 값은 최종적인 위치가 정해지므로, 이 알고리즘은 반드시 종료된다는 것이 보장됨&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;과정&quot;&gt;과정&lt;/h4&gt;
&lt;p&gt;1) 피봇은 p, 리스트 왼쪽 끝과 오른쪽 끝에서 시작한 인덱스들은 l(left), r(right)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 - 3 - 7 - 6 - 2 - 1 - 4    
l                   r   p 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2) 리스트 왼쪽에 있는 l 위치의 값이 피봇 값보다 크고, 오른쪽에 있는 r 위치의 값은 피봇 값보다 작으므로 둘을 교환한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 - 3 - 7 - 6 - 2 - 1 - 4 
l                   r   p 
1 - 3 - 7 - 6 - 2 - 5 - 4 
l                   r   p 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3) r 위치의 값이 피봇 값보다 작지만, l 위치의 값도 피봇값보다 작으므로 교환하지 않는다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 - 3 - 7 - 6 - 2 - 5 - 4 
    l           r       p 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4) l위치를 피봇 값보다 큰 값이 나올 때 까지 진행해 r 위치의 값과 교환(swap)한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 - 3 - 7 - 6 - 2 - 5 - 4 
        l       r       p &amp;gt;&amp;gt; swap 
1 - 3 - 2 - 6 - 7 - 5 - 4  
                         p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5) l위치가 r위치보다 같거나 커지면, l위치의 값과 피봇 값을 교환한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 - 3 - 2 - 6 - 7 - 5 - 4 
           l,r          p &amp;gt;&amp;gt; swap 
1 - 3 - 2 - 4 - 7 - 5 - 6 
            p             
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6) 최종 위치가 정해진 피봇 값을 제외하고 좌우의 리스트에 대해 각각 퀵 정렬을 재귀적으로 수행한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 - 3 - 2 
1 - 2 - 3 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;완성된 리스트는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 - 2 - 3 - 4 - 5 - 6 - 7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;java-소스&quot;&gt;Java 소스&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;quicksort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// low &amp;lt; high &amp;gt;&amp;gt;&amp;gt; low &amp;lt; right&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;결과&quot;&gt;결과&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4 7 6 8 5 9 
4 7 6 8 5 9 
4 5 6 8 7 9 
4 5 6 7 8 9 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;참고 사이트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;wikipedia : &amp;lt;ko.wikipedia.org/wiki/퀵_정렬&amp;gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="algorithm" /><summary type="html">시간복잡도 최선/평균 n*log (n), 최악 n^2의 방법 Quick Sort</summary></entry><entry><title type="html">병합정렬 (Merge Sort)</title><link href="http://localhost:4000/algorithm/2017/08/01/java_merge_sort.html" rel="alternate" type="text/html" title="병합정렬 (Merge Sort)" /><published>2017-08-01T09:51:42+09:00</published><updated>2017-08-01T09:51:42+09:00</updated><id>http://localhost:4000/algorithm/2017/08/01/java_merge_sort</id><content type="html" xml:base="http://localhost:4000/algorithm/2017/08/01/java_merge_sort.html">&lt;h4 id=&quot;시간복잡도-nlog-n-의-방법-mergesort&quot;&gt;시간복잡도 n*log (n) 의 방법 MergeSort&lt;/h4&gt;

&lt;h4 id=&quot;분할정복-알고리즘&quot;&gt;분할정복 알고리즘&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;배열을 반씩 분할&lt;/li&gt;
  &lt;li&gt;동일한 알고리즘을 통해 각각 정렬&lt;/li&gt;
  &lt;li&gt;병합&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/java_merge_sort/merge_sort.png&quot; alt=&quot;merge_sort&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;과정&quot;&gt;과정&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;6 개의 정렬되지 않은 정수형 배열 생성 : Arr (5, 8, 3, 9, 1, 2)&lt;/li&gt;
  &lt;li&gt;배열을 Arr1 = (5, 8, 3)과 Arr2 = (9, 1, 2)로 분할&lt;/li&gt;
  &lt;li&gt;다시 Arr3 = (5, 8)과 Arr4 = (3), Arr5 = (9,1)과 Arr6 = (2)로 분할&lt;/li&gt;
  &lt;li&gt;다시 Arr7 = (5), Arr8 = (8), Arr9 = (9), Arr10 = (1) 및 Arr6 = (2)로 분할&lt;/li&gt;
  &lt;li&gt;값을 비교 후 정렬 및 병합&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;java-소스&quot;&gt;Java 소스&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;mergesort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;결과&quot;&gt;결과&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 8 3 9 1 2 
3 5 8 9 1 2 
3 5 8 1 9 2 
3 5 8 1 2 9 
1 2 3 5 8 9 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;참고 사이트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;freecodecamp : &lt;a href=&quot;https://forum.freecodecamp.org/t/freecodecamp-algorithm-merge-sort-guide/16104&quot;&gt;https://forum.freecodecamp.org/t/freecodecamp-algorithm-merge-sort-guide/16104&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="algorithm" /><summary type="html">시간복잡도 n*log (n) 의 방법 MergeSort</summary></entry><entry><title type="html">RSA 비대칭키를 이용하여 패스워드 없이 ssh 접속방법</title><link href="http://localhost:4000/elastic/2017/07/19/ubuntu_rsa_conn_no_pw.html" rel="alternate" type="text/html" title="RSA 비대칭키를 이용하여 패스워드 없이 ssh 접속방법" /><published>2017-07-19T09:51:42+09:00</published><updated>2017-07-19T09:51:42+09:00</updated><id>http://localhost:4000/elastic/2017/07/19/ubuntu_rsa_conn_no_pw</id><content type="html" xml:base="http://localhost:4000/elastic/2017/07/19/ubuntu_rsa_conn_no_pw.html">&lt;p&gt;각 서버간 RSA 비대칭키를 이용 패스워드 없이 접속하는 방법&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;$ ssh-keygen&lt;/li&gt;
    &lt;li&gt;$ ssh-copy-id {계정}@{목적지 서버}&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;예시) node2(192.168.56.102)에서 node1(192.168.56.101)로 패스워드 없이 ssh 접속 &lt;br /&gt;
접속을 시도하는 서버(node2)는 Private Key가 필요, 목적지 서버(node1)는 Public Key가 필요 &lt;br /&gt;
(Public Key키는 자물쇠, Private Key는 그 자물쇠를 여는 키)&lt;/p&gt;

&lt;h3 id=&quot;1-private--public-key-생성-node2에서-실행&quot;&gt;1. Private / Public Key 생성 (node2에서 실행)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ ssh-keygen&lt;/p&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/user/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/user/.ssh/id_rsa.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;위처럼 메세지가 뜨는데 저장할 경로를 입력하라는 의미, 엔터를 누르면 /home/{계정명}/.ssh/ 경로에 키들이 생성 &lt;br /&gt;
(Private Key : /home/{계정명}/.ssh/id_rsa / Public Key : /home/{계정명}/.ssh/id_rsa.pub) &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-생성한-public-key를-목적지-서버node1에-복사-&quot;&gt;2. 생성한 public Key를 목적지 서버(node1)에 복사 &lt;br /&gt;&lt;/h3&gt;

&lt;h4 id=&quot;방법-1-&quot;&gt;방법 1) &lt;br /&gt;&lt;/h4&gt;
&lt;p&gt;생성된 public 키를 조회(cat)하여 그 내용을 목적지 서버의 /home/{계정}/.ssh/authorized_keys에 복사 &lt;br /&gt;
(authorized_keys파일이 없으면 700권한으로 생성) &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;방법-2-&quot;&gt;방법 2) &lt;br /&gt;&lt;/h4&gt;
&lt;p&gt;ssh-copy-id {계정}@{목적지 서버 ip} 명령어로 복사 (자동으로 /home/{계정}/.ssh/authorized_keys에 복사됨) &lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ ssh-copy-id user@192.168.56.101&lt;/p&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The authenticity of host &lt;span class=&quot;s1&quot;&gt;'192.168.56.101 (192.168.56.101)'&lt;/span&gt; can&lt;span class=&quot;s1&quot;&gt;'t be established.
ECDSA key fingerprint is 83:38:0a:e4:16:d5:20:c0:30:e7:0b:00:f1:0f:6d:b0.
Are you sure you want to continue connecting (yes/no)? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
user@192.168.56.101'&lt;/span&gt;s password:
Number of key&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; added: 1
Now try logging into the machine, with:   &lt;span class=&quot;s2&quot;&gt;&quot;ssh 'user@192.168.56.101'&quot;&lt;/span&gt;
and check to make sure that only the key&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; you wanted were added.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Ubuntu" /><summary type="html">각 서버간 RSA 비대칭키를 이용 패스워드 없이 접속하는 방법 $ ssh-keygen $ ssh-copy-id {계정}@{목적지 서버}</summary></entry><entry><title type="html">Elastic Search란?</title><link href="http://localhost:4000/elastic/2017/07/14/elastic_search_overview.html" rel="alternate" type="text/html" title="Elastic Search란?" /><published>2017-07-14T09:51:42+09:00</published><updated>2017-07-14T09:51:42+09:00</updated><id>http://localhost:4000/elastic/2017/07/14/elastic_search_overview</id><content type="html" xml:base="http://localhost:4000/elastic/2017/07/14/elastic_search_overview.html">&lt;h3 id=&quot;1-특징-&quot;&gt;1. 특징 &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;1) Apache Lucene 기반 (Full Text 검색엔진을 만들 수 있는 라이브러리를 제공, 자바언어로 개발, 사용자위치정보, 다국어 검색지원, 자동완성 지원, 미리보기 지원, 철자수정 기능 지원 / 대부분 Elasticsearch에서도 지원) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2) 분산시스템 &lt;br /&gt;
- 여러개의 Node로 구성되어 있는 분산시스템 &lt;br /&gt;
- Node는 데이터를 색인하고 검색을 수행하는 단위 프로세스 &lt;br /&gt;
- 데이터는 각 데이터 Node에 분산저장 &lt;br /&gt;
- Replica를 유지하여 데이터 보호 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3) REST API를 통해 데이터 처리 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;4) &lt;a href=&quot;https://www.slideshare.net/seunghyuneom/elastic-search-52724188#38&quot;&gt;RDBMS와 Elastic Search 구조 비교&lt;/a&gt; (seunghyuneom님의 SliceShare) &lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RDBMS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ElasticSearch&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Database&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Index&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Row&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Document&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Column&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Field&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Scheme&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Mapping&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;2-용어-&quot;&gt;2. 용어 &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;1) Cluster : ElasticSearch의 가장 큰 시스템 단위 &lt;br /&gt;
- 하나의 Cluster는 동일한 cluster.name 내 여러개 Node로 구성되어 있음 &lt;br /&gt;
- 같은 Cluster 이름으로 노드를 실행 시키면 자동확장 (네트워크 바인딩) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2) Node : 실행중인 ElasticSearch Instance &lt;br /&gt;
- Master Node : Cluster 메타 정보 관리, Node 추가 삭제 &lt;br /&gt;
- Data Node : 실제 데이터를 저장하는 Node &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3) Index : 관련성이 있는 데이터의 저장 위치 &lt;br /&gt;
- 물리적인 Shard에 대한 논리적인 이름 공간 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;4) Shard : Index의 데이터를 저장하여 Indexing된 Document가 실제 저장되는 곳 &lt;br /&gt;
- Primary Shard : 모든 Document는 단 하나의 Primary Shard에 위치, 갯수는 Index를 생성할 때 결정되고 변경될 수 있음(default) &lt;br /&gt;
- Replicat Shard : Primary Shard의 복사본 &lt;br /&gt;
- 장애발생 시 복구, 검색에 대한 Concurrnt Read 보장 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;5) 네트워크 바인딩 : 다른 서버의 노드와 바인딩 (자유롭게 Scale-in/out 가능) &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-rest-api-예제-&quot;&gt;3. Rest API 예제 &lt;br /&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CRUD&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Elastic Search&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Create&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Post&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Read&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Update&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Put&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Delete&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Delete&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;--curl--x-method-httphostportindextypeid-&quot;&gt;- curl -X {method} http://host:port/{Index}/{Type}/{Id} &lt;br /&gt;&lt;/h5&gt;
&lt;p&gt;1) POST (생성)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST http://localhost:9200/custom/test/1 -d &lt;span class=&quot;s1&quot;&gt;'
{
  &quot;title&quot;: &quot;Elasticsearch Test&quot;,
  &quot;name&quot;: &quot;Lee&quot;,
  &quot;date&quot;: &quot;2017-07-10&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Response
    &lt;blockquote&gt;
      &lt;p&gt;{“_index”:”custom”,”_type”:”test”,”_id”:”1”,”_version”:1,”result”:”created”,”_shards”:{“total”:2,”successful”:1,”failed”:0},”created”:true}&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) PUT (업데이트)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPUT http://localhost:9200/custom/test/1 -d &lt;span class=&quot;s1&quot;&gt;'
{
  &quot;title&quot;: &quot;Elasticsearch Test Update&quot;,
  &quot;name&quot;: [&quot;Lee&quot;, &quot;Cho&quot;],
  &quot;date&quot;: &quot;2017-07-11&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Response
    &lt;blockquote&gt;
      &lt;p&gt;{“_index”:”custom”,”_type”:”test”,”_id”:”1”,”_version”:2,”result”:”updated”,”_shards”:{“total”:2,”successful”:1,”failed”:0},”created”:false}&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3) GET (조회 / pretty 옵션은 보기좋게 출력하고 싶을때 사용)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XGET http://localhost:9200/custom/test/1?pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Response
    &lt;blockquote&gt;
      &lt;p&gt;{ &lt;br /&gt;
“_index” : “custom”, &lt;br /&gt;
“_type” : “test”, &lt;br /&gt;
“_id” : “1”, &lt;br /&gt;
“_version” : 2, &lt;br /&gt;
“found” : true, &lt;br /&gt;
“_source” : { &lt;br /&gt;
  “title” : “Elasticsearch Test Update”, &lt;br /&gt;
  “name” : [ &lt;br /&gt;
    “Lee”, &lt;br /&gt;
    “Cho” &lt;br /&gt;
  ], &lt;br /&gt;
  “date” : “2017-07-11” &lt;br /&gt;
} &lt;br /&gt;
} &lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4) DELETE (삭제)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XDELETE http://localhost:9200/custom/test/1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Response
    &lt;blockquote&gt;
      &lt;p&gt;{“found”:true,”_index”:”custom”,”_type”:”test”,”_id”:”1”,”_version”:3,”result”:”deleted”,”_shards”:{“total”:2,”successful”:1,”failed”:0}}&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기타-&quot;&gt;기타. &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;1) Elasric Search의 동작방식 (NAVER D2) &lt;br /&gt;
- &lt;a href=&quot;https://www.slideshare.net/deview/2d1elasticsearch#12&quot;&gt;Creating, indexing and deleting a document&lt;/a&gt; &lt;br /&gt;
- &lt;a href=&quot;https://www.slideshare.net/deview/2d1elasticsearch#13&quot;&gt;Retrieve, query and fetch a document&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2) 설치방법  &lt;br /&gt;
- &lt;a href=&quot;/elastic/2017/07/05/ELK_install_exec.html&quot;&gt;‘ELK 설치/실행 (Elastic Search + Kibana + Logstash)’ : ‘1. ElasticSearch를 설치합니다. (ubuntu 기준) 참고’&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
seunghyuneom님의 SliceShare : &lt;a href=&quot;https://www.slideshare.net/seunghyuneom/elastic-search-52724188&quot;&gt;https://www.slideshare.net/seunghyuneom/elastic-search-52724188&lt;/a&gt; &lt;br /&gt;
NAVER D2 SliceShare : &lt;a href=&quot;https://www.slideshare.net/deview/2d1elasticsearch&quot;&gt;https://www.slideshare.net/deview/2d1elasticsearch&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="elastic" /><summary type="html">1. 특징 1) Apache Lucene 기반 (Full Text 검색엔진을 만들 수 있는 라이브러리를 제공, 자바언어로 개발, 사용자위치정보, 다국어 검색지원, 자동완성 지원, 미리보기 지원, 철자수정 기능 지원 / 대부분 Elasticsearch에서도 지원)</summary></entry><entry><title type="html">Elastic Stack을 이용 서버 모니터링 하기 (Elastic Search + Kibana + Metricbeat)</title><link href="http://localhost:4000/elastic/2017/07/10/elastic_stack_monitoring_using_metricbeat.html" rel="alternate" type="text/html" title="Elastic Stack을 이용 서버 모니터링 하기 (Elastic Search + Kibana + Metricbeat)" /><published>2017-07-10T09:51:42+09:00</published><updated>2017-07-10T09:51:42+09:00</updated><id>http://localhost:4000/elastic/2017/07/10/elastic_stack_monitoring_using_metricbeat</id><content type="html" xml:base="http://localhost:4000/elastic/2017/07/10/elastic_stack_monitoring_using_metricbeat.html">&lt;p&gt;아래처럼 Simple한 구조로 서버 모니터링 방법을 구현해보겠습니다. (ubuntu 기준)
&lt;img src=&quot;/images/elastic_stack_overview/1_developing_elastic_stack_simple.png&quot; alt=&quot;1_developing_elastic_stack_simple&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-elastic-search-kibana의-설치실행은-아래-글을-참고하여-진행하면-됩니다-&quot;&gt;1. Elastic Search, Kibana의 설치/실행은 아래 글을 참고하여 진행하면 됩니다. &lt;br /&gt;&lt;/h4&gt;
&lt;p&gt;※ &lt;a href=&quot;/elastic/2017/07/05/ELK_install_exec.html&quot;&gt;‘ELK 설치/실행 (Elastic Search + Kibana + Logstash)’&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-metricbeat-설치실행을-합니다&quot;&gt;2. Metricbeat 설치/실행을 합니다.&lt;/h4&gt;
&lt;p&gt;(&lt;a href=&quot;https://www.elastic.co/guide/en/beats/metricbeat/5.5/metricbeat-getting-started.html&quot;&gt;https://www.elastic.co/guide/en/beats/metricbeat/5.5/metricbeat-getting-started.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2-1. Metricbeat 설치&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ curl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-5.5.1-amd64.deb &lt;br /&gt;
$ sudo dpkg -i metricbeat-5.5.1-amd64.deb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2-2. Metricbeat yaml 파일 생성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아래 localhost:9200 부분은 ElasticSearch가 설치된 호스트와 포트로 써주면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ vi /etc/metricbeat/metricbeat.yml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#==========================  Modules configuration ============================
metricbeat.modules:

#------------------------------- System Module -------------------------------
- module: system
  metricsets:
    # CPU stats
    - cpu
    # System Load stats
    - load
    # Per CPU core stats
    #- core
    # IO stats
    #- diskio
    # Per filesystem stats
    - filesystem
    # File system summary stats
    - fsstat
    # Memory stats
    - memory
    # Network stats
    - network
    # Per process stats
    - process
    # Sockets (linux only)
    #- socket
  enabled: true
  period: 10s
  processes: ['.*']

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  hosts: [&quot;localhost:9200&quot;]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;※ output을 Logstash로 설정 할 경우 참고&lt;br /&gt;
(&lt;a href=&quot;https://www.elastic.co/guide/en/beats/metricbeat/5.5/config-metricbeat-logstash.html&quot;&gt;https://www.elastic.co/guide/en/beats/metricbeat/5.5/config-metricbeat-logstash.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2-3. Metricbeat 시작 (시스템 모니터링이기 때문에 권한을 sudo 권한 필요)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ sudo /etc/init.d/metricbeat start&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;※ &lt;a href=&quot;https://www.elastic.co/guide/en/beats/metricbeat/5.5/command-line-options.html&quot;&gt;Metricbeat Command Option&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-kibana-dasboard로-확인&quot;&gt;3. Kibana Dasboard로 확인&lt;/h4&gt;
&lt;p&gt;3-1. 기본으로 제공되는 Kibana Dashboard index pattern import&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ /usr/share/metricbeat/scripts/import_dashboards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3-2 Kibana 접속
(원격으로 putty 등으로 접속할 경우 터널링 필요) &lt;br /&gt;
&lt;a href=&quot;http://localhost:5601&quot;&gt;http://localhost:5601&lt;/a&gt; 접속 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3-3. Dashboard 확인
&lt;img src=&quot;/images/elastic_stack_monitoring_using_metricbeat/elastic_stack_monitoring_using_metricbeat.png&quot; alt=&quot;elastic_stack_monitoring_using_metricbeat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
Elastic : &lt;a href=&quot;https://www.elastic.co/guide/en/beats/metricbeat/5.5/metricbeat-getting-started.html&quot;&gt;https://www.elastic.co/guide/en/beats/metricbeat/5.5/metricbeat-getting-started.html&lt;/a&gt; &lt;br /&gt;
christoph-wurm(Elastic Solution Architecter) : &lt;a href=&quot;https://www.slideshare.net/DevopsCon/using-elastic-to-monitor-everything-christoph-wurm-elastic-devopsdays-tel-aviv-2016&quot;&gt;https://www.slideshare.net/DevopsCon/using-elastic-to-monitor-everything-christoph-wurm-elastic-devopsdays-tel-aviv-2016&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="elastic" /><summary type="html">아래처럼 Simple한 구조로 서버 모니터링 방법을 구현해보겠습니다. (ubuntu 기준)</summary></entry><entry><title type="html">ELK : Kibana로 데이터 시각화</title><link href="http://localhost:4000/elastic/2017/07/06/ELK_kibana_chart.html" rel="alternate" type="text/html" title="ELK : Kibana로 데이터 시각화" /><published>2017-07-06T09:51:42+09:00</published><updated>2017-07-06T09:51:42+09:00</updated><id>http://localhost:4000/elastic/2017/07/06/ELK_kibana_chart</id><content type="html" xml:base="http://localhost:4000/elastic/2017/07/06/ELK_kibana_chart.html">&lt;p&gt;&lt;a href=&quot;/elastic/2017/07/05/ELK_install_exec.html&quot;&gt;지난 글&lt;/a&gt;에서 ELK를 설치/실행을 진행했습니다. 이번에는 이어서 Logstash에서 설정한 부분을 토대로 서버의 cpu, memory, hdd 정보를 Kinaba를 통해 시각화 하는 방법을 알려드리겠습니다. &lt;br /&gt;
※ 설치/실행 url : &lt;a href=&quot;/elastic/2017/07/05/ELK_install_exec.html&quot;&gt;‘ELK 설치/실행 (Elastic Search + Kibana + Logstash)’&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;kibana-데이터-시각화&quot;&gt;Kibana 데이터 시각화&lt;/h4&gt;
&lt;p&gt;(&lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/tutorial-visualizing.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/tutorial-visualizing.html&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&quot;1-kibana-접속-후-index-설정&quot;&gt;1. Kibana 접속 후 index 설정&lt;/h4&gt;
&lt;p&gt;(원격으로 putty 등으로 접속할 경우 터널링 필요) &lt;br /&gt;
&lt;a href=&quot;http://localhost:5601&quot;&gt;http://localhost:5601&lt;/a&gt; 접속 &lt;br /&gt;
지난글에 이어서 접속할 경우 처음에 웹페이지에 접속하면 아래와 같은 메세지가 노출됩니다. &lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Unable to fetch mapping. Do you have indices matching the pattern?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;지난 글에서 Logstash 설정으로 server-status-* 형태로 index를 생성해서 logstash-* 형태의 index를 못 찾기 때문입니다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1-1. 텍스트 박스 안에 logstash-*를 server-status-*로 변경한 후 create 버튼을 클릭하면 해당 index의 데이터를 불러와서 표시해줍니다. &lt;br /&gt;
&lt;img src=&quot;/images/elk_kibana_chart/1_input_index.png&quot; alt=&quot;1_input_index&quot; /&gt;
1-2. 아래처럼 해당 Index의 모든 field 목록을 보여줍니다.
&lt;img src=&quot;/images/elk_kibana_chart/2_create_index.png&quot; alt=&quot;2_create_index&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-visualization-생성-및-설정&quot;&gt;2. Visualization 생성 및 설정&lt;/h4&gt;
&lt;p&gt;데이터를 시각화 하기 위해서는 불러온 데이터를 어떤 방식으로 시각화할것인지 선택 및 설정을 해야합니다. &lt;br /&gt;
2-1. Visualization 생성 
&lt;img src=&quot;/images/elk_kibana_chart/4_create_visualize.png&quot; alt=&quot;4_create_visualize&quot; /&gt;
2-1. Chart 종류 선택 (저는 Line으로 선택했습니다.)
&lt;img src=&quot;/images/elk_kibana_chart/5_choice_chart.png&quot; alt=&quot;5_choice_chart&quot; /&gt;
2-2. Filter 추가 (memory 예시)
&lt;img src=&quot;/images/elk_kibana_chart/6_add_filter.png&quot; alt=&quot;6_add_filter&quot; /&gt;
2-3. Y-Axis, X-Axis 설정 후 재생 버튼 클릭
&lt;img src=&quot;/images/elk_kibana_chart/7_select_graph.png&quot; alt=&quot;7_select_graph&quot; /&gt;
2-4. 데이터 시각화
&lt;img src=&quot;/images/elk_kibana_chart/8_view_chart.png&quot; alt=&quot;8_view_chart&quot; /&gt;
2-5. 해당 설정 저장
&lt;img src=&quot;/images/elk_kibana_chart/9_save_type.png&quot; alt=&quot;9_save_type&quot; /&gt;
※ 2-2 ~ 2-5 과정을 cpu, hdd도 반복하시면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;3-저장된-visualization을-dashboard에-추가-클릭&quot;&gt;3. 저장된 Visualization을 Dashboard에 추가 (클릭)&lt;/h4&gt;
&lt;p&gt;3-1. Dashboard 생성 및 추가
&lt;img src=&quot;/images/elk_kibana_chart/10_create_a_dashboard.png&quot; alt=&quot;10_create_a_dashboard&quot; /&gt;
&lt;img src=&quot;/images/elk_kibana_chart/11_add_a_dashboard.png&quot; alt=&quot;11_add_a_dashboard&quot; /&gt;
3-2. 2에서 저장한 Visualization을 클릭하여 Dashboard에 추가
&lt;img src=&quot;/images/elk_kibana_chart/12_select_metric.png&quot; alt=&quot;12_select_metric&quot; /&gt;
3-3 Dashboard로 출력 완료
&lt;img src=&quot;/images/elk_kibana_chart/13_view_chart.png&quot; alt=&quot;13_view_chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
webkid 블로그 : &lt;a href=&quot;https://blog.webkid.io/visualize-datasets-with-elk/&quot;&gt;https://blog.webkid.io/visualize-datasets-with-elk/&lt;/a&gt; &lt;br /&gt;
Elastic : &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/discover.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/discover.html&lt;/a&gt; &lt;br /&gt;
Elastic : &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/tutorial-visualizing.html&quot;&gt;https://www.elastic.co/guide/en/kibana/current/tutorial-visualizing.html&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="elastic" /><summary type="html">지난 글에서 ELK를 설치/실행을 진행했습니다. 이번에는 이어서 Logstash에서 설정한 부분을 토대로 서버의 cpu, memory, hdd 정보를 Kinaba를 통해 시각화 하는 방법을 알려드리겠습니다. ※ 설치/실행 url : ‘ELK 설치/실행 (Elastic Search + Kibana + Logstash)’ Kibana 데이터 시각화 (https://www.elastic.co/guide/en/kibana/current/tutorial-visualizing.html) 1. Kibana 접속 후 index 설정 (원격으로 putty 등으로 접속할 경우 터널링 필요) http://localhost:5601 접속 지난글에 이어서 접속할 경우 처음에 웹페이지에 접속하면 아래와 같은 메세지가 노출됩니다. Unable to fetch mapping. Do you have indices matching the pattern? 지난 글에서 Logstash 설정으로 server-status-* 형태로 index를 생성해서 logstash-* 형태의 index를 못 찾기 때문입니다.</summary></entry><entry><title type="html">ELK 구축 (Elastic Search + Kibana + Logstash)</title><link href="http://localhost:4000/elastic/2017/07/05/ELK_install_exec.html" rel="alternate" type="text/html" title="ELK 구축 (Elastic Search + Kibana + Logstash)" /><published>2017-07-05T09:51:42+09:00</published><updated>2017-07-05T09:51:42+09:00</updated><id>http://localhost:4000/elastic/2017/07/05/ELK_install_exec</id><content type="html" xml:base="http://localhost:4000/elastic/2017/07/05/ELK_install_exec.html">&lt;h4 id=&quot;1-elasticsearch를-설치합니다-ubuntu-기준&quot;&gt;1. ElasticSearch를 설치합니다. (ubuntu 기준)&lt;/h4&gt;
&lt;h5 id=&quot;httpswwwelasticcoguideenbeatslibbeat55elasticsearch-installationhtml&quot;&gt;(&lt;a href=&quot;https://www.elastic.co/guide/en/beats/libbeat/5.5/elasticsearch-installation.html&quot;&gt;https://www.elastic.co/guide/en/beats/libbeat/5.5/elasticsearch-installation.html&lt;/a&gt;)&lt;/h5&gt;

&lt;p&gt;1-1. JAVA 설치 (8이상 버전에서 실행가능)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ sudo add-apt-repository ppa:openjdk-r/ppa &lt;br /&gt;
$ sudo apt-get update &lt;br /&gt;
$ sudo apt-get install openjdk-8-jdk &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1-2. ElasticSearch 다운로드 및 unzip&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.1.zip &lt;br /&gt;
$ unzip elasticsearch-5.5.1.zip &lt;br /&gt;
$ cd elasticsearch-5.5.1 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1-3. ElasticSearch config 설정 (사용자가 원하는 이름과 경로로 설정해주면 됩니다. 아래는 예시입니다.)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;(../elasticsearch-5.5.1/config 디렉토리에서 실행) &lt;br /&gt;
$ vi elasticsearch.yml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cluster.name: elk_cluster
node.name: elk_node-1
http.port: 9200
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;1-4. 실행&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;(../elasticsearch-5.5.1/bin 디렉토리에서 실행) &lt;br /&gt;
./elasticsearch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1-5. 실행 확인&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ curl localhost:9200&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elk_node-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cluster_name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elk_cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cluster_uuid&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CEmUNQhIQlmuUdU6qv1JWQ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5.5.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;build_hash&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;19c13d0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;build_date&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2017-07-18T20:44:24.823Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;build_snapshot&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lucene_version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6.6.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;tagline&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;You Know, for Search&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-logstash를-설치합니다&quot;&gt;2. Logstash를 설치합니다.&lt;/h4&gt;
&lt;h5 id=&quot;httpswwwelasticcoguideenbeatslibbeat55logstash-installationhtml&quot;&gt;(&lt;a href=&quot;https://www.elastic.co/guide/en/beats/libbeat/5.5/logstash-installation.html&quot;&gt;https://www.elastic.co/guide/en/beats/libbeat/5.5/logstash-installation.html&lt;/a&gt;)&lt;/h5&gt;

&lt;p&gt;2-1. Logstash 다운로드 및 unzip&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ curl -L -O https://artifacts.elastic.co/downloads/logstash/logstash-5.5.1.zip &lt;br /&gt;
$ unzip logstash-5.5.1.zip &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2-2. Logstash config 설정 &lt;br /&gt;
(&lt;a href=&quot;http://rea1man.tistory.com/83&quot;&gt;http://rea1man.tistory.com/83&lt;/a&gt; 블로그에서 참고하였으며 최근 양식으로 conf 수정하였습니다.)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아래 conf는 free, cat /proc/stat, df -k 명령어를 파싱하여 mem, cpu, hdd를 모니터링하는 설정입니다.&lt;/li&gt;
  &lt;li&gt;localhost:9200 이 부분은 ElasticSearch가 설치된 호스트 및 포트를 입력해주면됩니다.&lt;/li&gt;
  &lt;li&gt;server-status-%{+YYYY.MM.dd} 이 부분은 원하는 index name을 설정해주면 됩니다. (추후 Kinaba에서 데이터 시각화 시 필요한 name입니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;(../logstash-5.5.1/bin 디렉토리에서 실행) &lt;br /&gt;
$ vi logstash-simple.conf&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input {
  exec {
    command =&amp;gt; &quot;free | grep buffers/cache | awk '{print int($3/($3+$4)*100)}'&quot;
    interval =&amp;gt; &quot;5&quot;
    type =&amp;gt; &quot;mem&quot;
  }
  exec {
    command =&amp;gt; &quot;cat /proc/stat | grep 'cpu ' | awk '{print int(($2+$3+$4)/($2+$3+$4+$5)*100)}'&quot;
    interval =&amp;gt; &quot;5&quot;
    type =&amp;gt; &quot;cpu&quot;
  }
  exec {
    command =&amp;gt; &quot;df -k | grep /was | awk '{print ($5*1)}'&quot;
    interval =&amp;gt; &quot;5&quot;
    type =&amp;gt; &quot;hdd&quot;
  }
}
filter {
  mutate {
    convert =&amp;gt; [&quot;message&quot;, &quot;integer&quot;]
  }
}
output {
  elasticsearch{
        hosts =&amp;gt; &quot;localhost:9200&quot;
        index =&amp;gt; &quot;server-status-%{+YYYY.MM.dd}&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;2-3. 실행&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;(../logstash-5.5.1/bin 디렉토리에서 실행) &lt;br /&gt;
$ ./logstash -f logstash-simple.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;-만약-정상적으로-올라가지-않는다면-일단-elasticsearch-프로세스를-재시작-후-logstash를-실행-하시면-됩니다&quot;&gt;※ 만약 정상적으로 올라가지 않는다면 일단 ElasticSearch 프로세스를 재시작 후 Logstash를 실행 하시면 됩니다.&lt;/h5&gt;

&lt;h4 id=&quot;3-kibana-설치&quot;&gt;3. kibana 설치&lt;/h4&gt;
&lt;h5 id=&quot;httpswwwelasticcoguideenbeatslibbeat55kibana-installationhtml&quot;&gt;(&lt;a href=&quot;https://www.elastic.co/guide/en/beats/libbeat/5.5/kibana-installation.html&quot;&gt;https://www.elastic.co/guide/en/beats/libbeat/5.5/kibana-installation.html&lt;/a&gt;)&lt;/h5&gt;

&lt;p&gt;3-1. 다운로드 및 실행&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -L -O https://artifacts.elastic.co/downloads/kibana/kibana-5.5.1-linux-x86_64.tar.gz &lt;br /&gt;
tar xzvf kibana-5.5.1-linux-x86_64.tar.gz &lt;br /&gt;
cd kibana-5.5.1-linux-x86_64/ &lt;br /&gt;
./bin/kibana&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3-2. Kibana 접속 확인 &lt;br /&gt;
(원격으로 putty 등으로 접속할 경우 터널링 필요) &lt;br /&gt;
&lt;a href=&quot;http://localhost:5601&quot;&gt;http://localhost:5601&lt;/a&gt; 접속
&lt;img src=&quot;/images/elk_kibana_chart/0_input_index.png&quot; alt=&quot;0_input_index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
Realman World 블로그: &lt;a href=&quot;http://rea1man.tistory.com/83&quot;&gt;http://rea1man.tistory.com/83&lt;/a&gt; &lt;br /&gt;
Elastic : &lt;a href=&quot;https://www.elastic.co/guide&quot;&gt;https://www.elastic.co/guide&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="elastic" /><summary type="html">1. ElasticSearch를 설치합니다. (ubuntu 기준) (https://www.elastic.co/guide/en/beats/libbeat/5.5/elasticsearch-installation.html)</summary></entry><entry><title type="html">Elastic Stack 이란?</title><link href="http://localhost:4000/elastic/2017/06/30/elastic_stack_overview.html" rel="alternate" type="text/html" title="Elastic Stack 이란?" /><published>2017-06-30T09:51:42+09:00</published><updated>2017-06-30T09:51:42+09:00</updated><id>http://localhost:4000/elastic/2017/06/30/elastic_stack_overview</id><content type="html" xml:base="http://localhost:4000/elastic/2017/06/30/elastic_stack_overview.html">&lt;p&gt;&lt;img src=&quot;/images/elastic_stack_overview/elastic_stack.png&quot; alt=&quot;elastic_stack&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;elastic-stack이란&quot;&gt;Elastic Stack이란&lt;/h3&gt;
&lt;h5 id=&quot;사용자가-서버로부터-원하는-모든-유형의-데이터를-가져와서-실시간으로-해당-데이터를-검색-분석-및-시각화-할-수-있도록-도와주는-elastic의-오픈소스-서비스-제품입니다&quot;&gt;사용자가 서버로부터 원하는 모든 유형의 데이터를 가져와서 실시간으로 해당 데이터를 검색, 분석 및 시각화 할 수 있도록 도와주는 Elastic의 오픈소스 서비스 제품입니다.&lt;/h5&gt;
&lt;h5 id=&quot;기존-elastic-search--logstash--kibana를-같이-묶어-elkelk-stack라는-서비스명으로-제공했으나-500-버전부터-beats가-포함되어-elastic-stack이란-이름으로-현재-서비스가-제공되고-있습니다&quot;&gt;기존 Elastic Search + Logstash + Kibana를 같이 묶어 ELK(ELK Stack)라는 서비스명으로 제공했으나 5.0.0 버전부터 Beats가 포함되어 &lt;a href=&quot;https://www.elastic.co/kr/blog/heya-elastic-stack-and-x-pack&quot;&gt;Elastic Stack&lt;/a&gt;이란 이름으로 현재 서비스가 제공되고 있습니다.&lt;/h5&gt;
&lt;h5 id=&quot;추가적으로-확장기능인-x-pack-elastic-cloud-서비스도-제공하여-enterprise-서비스로-확대하고-있습니다-&quot;&gt;추가적으로 확장기능인 X-Pack, Elastic Cloud 서비스도 제공하여 Enterprise 서비스로 확대하고 있습니다. &lt;br /&gt;&lt;/h5&gt;
&lt;h5 id=&quot;현재-비슷한-기능을-제공하는-influxdb--grafana-서비스가-있으며-어느-서비스가-더-퍼포먼스가-좋은지는-여전히-토론중입니다-elk-vs-grafana--influxdb-grafana-vs-kibana&quot;&gt;현재 비슷한 기능을 제공하는 influxDB + grafana 서비스가 있으며 어느 서비스가 더 퍼포먼스가 좋은지는 여전히 토론중입니다. (&lt;a href=&quot;https://discuss.elastic.co/t/elk-vs-grafana-influxdb/1686&quot;&gt;ELK vs grafana + influxDB&lt;/a&gt;, &lt;a href=&quot;https://logz.io/blog/grafana-vs-kibana/&quot;&gt;Grafana vs Kibana&lt;/a&gt;)&lt;br /&gt;&lt;/h5&gt;
&lt;h5 id=&quot;아래-그림은-elastic-stack의-flow입니다&quot;&gt;아래 그림은 Elastic Stack의 Flow입니다.&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/images/elastic_stack_overview/elastic_stack_2.png&quot; alt=&quot;elastic_stack_2&quot; class=&quot;center-image&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;elastic-search-&quot;&gt;Elastic Search &lt;br /&gt;&lt;/h3&gt;
&lt;h5 id=&quot;루씬-기반의-full-text로-검색이-가능한-오픈소스-분석엔진입니다-주로-rest-api를-이용해-처리합니다&quot;&gt;루씬 기반의 Full Text로 검색이 가능한 오픈소스 분석엔진입니다. 주로 REST API를 이용해 처리합니다.&lt;/h5&gt;
&lt;h5 id=&quot;대량의-데이터를-신속하고-거의-실시간으로-저장-검색-및-분석-할-수-있습니다&quot;&gt;대량의 데이터를 신속하고 거의 실시간으로 저장, 검색 및 분석 할 수 있습니다.&lt;/h5&gt;

&lt;h3 id=&quot;logstash-&quot;&gt;Logstash &lt;br /&gt;&lt;/h3&gt;
&lt;h5 id=&quot;다양한-플러그인을-이용하여-데이터-집계-및-보관-서버-데이터-처리-파이프라인으로-데이터를-수집하여-필터를-통해-변환-후-elastic-search로-전송합니다&quot;&gt;다양한 플러그인을 이용하여 데이터 집계 및 보관, 서버 데이터 처리. 파이프라인으로 데이터를 수집하여 필터를 통해 변환 후 Elastic Search로 전송합니다.&lt;/h5&gt;
&lt;h5 id=&quot;--입력--beats-cloudwatch-eventlog-등의-다양한-입력을-지원하여-데이터-수집&quot;&gt;- 입력 : Beats, Cloudwatch, Eventlog 등의 다양한 입력을 지원하여 데이터 수집&lt;/h5&gt;
&lt;h5 id=&quot;--필터--형식이나-복잡성에-상관없이-설정을-통해-데이터를-동적으로-변환&quot;&gt;- 필터 : 형식이나 복잡성에 상관없이 설정을 통해 데이터를 동적으로 변환&lt;/h5&gt;
&lt;h5 id=&quot;--출력--elastic-search-email-ecs-kafka-등-원하는-저장소에-데이터를-전송&quot;&gt;- 출력 : Elastic Search, Email, ECS, Kafka 등 원하는 저장소에 데이터를 전송&lt;/h5&gt;

&lt;h3 id=&quot;kibana-&quot;&gt;Kibana &lt;br /&gt;&lt;/h3&gt;
&lt;h5 id=&quot;데이터를-시각화해주는-도구입니다&quot;&gt;데이터를 시각화해주는 도구입니다.&lt;/h5&gt;

&lt;h3 id=&quot;beats-&quot;&gt;Beats &lt;br /&gt;&lt;/h3&gt;
&lt;h5 id=&quot;경량-에이전트로-설치되어-데이터를-logstash-또는-elastic-search로-전송하는-도구입니다-logstash보다-경량화되어-있는-서비스입니다-&quot;&gt;경량 에이전트로 설치되어 데이터를 Logstash 또는 Elastic Search로 전송하는 도구입니다. Logstash보다 경량화되어 있는 서비스입니다. &lt;br /&gt;&lt;/h5&gt;
&lt;h5 id=&quot;filebeat-metricbeat-packetbeat-winlogbeat-heartbeat-등이-있으며-libbeat을-이용하여-직접-구축도-가능합니다-&quot;&gt;Filebeat, Metricbeat, Packetbeat, Winlogbeat, Heartbeat 등이 있으며 Libbeat을 이용하여 직접 구축도 가능합니다. &lt;br /&gt;&lt;/h5&gt;
&lt;h5 id=&quot;--packetbeat은-응용-프로그램-서버간에-교환되는-트랜잭션에-대한-정보를-제공하는-네트워크-패킷-분석기&quot;&gt;- Packetbeat은 응용 프로그램 서버간에 교환되는 트랜잭션에 대한 정보를 제공하는 네트워크 패킷 분석기&lt;/h5&gt;
&lt;h5 id=&quot;--filebeat는-서버에서-로그-파일을-제공&quot;&gt;- Filebeat는 서버에서 로그 파일을 제공&lt;/h5&gt;
&lt;h5 id=&quot;--metricbeat은-서버에서-실행중인-운영-체제-및-서비스에서-메트릭을-주기적으로-수집하는-서버-모니터링-에이전트&quot;&gt;- Metricbeat은 서버에서 실행중인 운영 체제 및 서비스에서 메트릭을 주기적으로 수집하는 서버 모니터링 에이전트&lt;/h5&gt;
&lt;h5 id=&quot;--winlogbeat는-windows-이벤트-로그를-제공&quot;&gt;- Winlogbeat는 Windows 이벤트 로그를 제공&lt;br /&gt;&lt;br /&gt;&lt;/h5&gt;

&lt;h3 id=&quot;x-pack---elastic-stack의-확장-pack-&quot;&gt;X-Pack - Elastic Stack의 확장 Pack &lt;br /&gt;&lt;/h3&gt;
&lt;h5 id=&quot;elastic-stack에-확장기능을-제공합니다-sucurity-monitoring-alerting-reporting-graph-machine-learning&quot;&gt;Elastic Stack에 확장기능을 제공합니다. (Sucurity, Monitoring, Alerting, Reporting, Graph, Machine Learning)&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/elastic_stack_overview/x_pack.png&quot; alt=&quot;x_pack&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;basic으로-제공하는-monitoring을-제외하고-나머지는-유료로-제공됩니다&quot;&gt;(Basic으로 제공하는 Monitoring을 제외하고 나머지는 유료로 제공됩니다.)&lt;/h5&gt;
&lt;h5 id=&quot;--sucurity이전-shield--인증기능-사용자-관리-노드--http--elastic-search-클라이언트-간-통신-트래픽-보호-field--document-수준까지-데이터-보호--audit-log-감시로그-제공&quot;&gt;- Sucurity(이전 Shield) : 인증기능, 사용자 관리, 노드 / HTTP / Elastic Search 클라이언트 간 통신 트래픽 보호, Field / Document 수준까지 데이터 보호 / Audit Log (감시로그) 제공&lt;/h5&gt;
&lt;h5 id=&quot;--alerting--데이터-변경사항에-대한-알림-제공&quot;&gt;- Alerting : 데이터 변경사항에 대한 알림 제공&lt;/h5&gt;
&lt;h5 id=&quot;--monitoring이전-marvel--elk-stack-상태를-지속적으로-체크&quot;&gt;- Monitoring(이전 Marvel) : ELK Stack 상태를 지속적으로 체크&lt;/h5&gt;
&lt;h5 id=&quot;--reporting--pdf-형식의-주기적인-보고서를-생성-email-등으로-전송&quot;&gt;- Reporting : PDF 형식의 주기적인 보고서를 생성, Email 등으로 전송&lt;/h5&gt;
&lt;h5 id=&quot;--graph--데이터-시각화&quot;&gt;- Graph : 데이터 시각화&lt;/h5&gt;
&lt;h5 id=&quot;--alerting--데이터-변경사항에-대한-알림-제공--machine-learning--데이터의-흐름-주기성-등을-자동으로-실시간-모니터링을-하여-문제를-식별하고-근본원인-분석&quot;&gt;- Alerting : 데이터 변경사항에 대한 알림 제공- Machine Learning : 데이터의 흐름, 주기성 등을 자동으로 실시간 모니터링을 하여 문제를 식별하고 근본원인 분석&lt;/h5&gt;

&lt;h3 id=&quot;elastic-cloud-&quot;&gt;Elastic Cloud &lt;br /&gt;&lt;/h3&gt;
&lt;h5 id=&quot;최신-버전의-elasticsearch-및-kibana를-사용하여-amazon-aws에서-실행되는-보안-클러스터를-배포하고-관리합니다&quot;&gt;최신 버전의 Elasticsearch 및 Kibana를 사용하여 Amazon AWS에서 실행되는 보안 클러스터를 배포하고 관리합니다.&lt;/h5&gt;
&lt;h5 id=&quot;아래는-elastic-solution-architecterchristoph-wurm가-설명하는-simple부터-enterprise까지-서비스-구축-예시입니다-링크&quot;&gt;아래는 Elastic Solution Architecter(christoph-wurm)가 설명하는 Simple부터 Enterprise까지 서비스 구축 예시입니다. &lt;a href=&quot;https://www.slideshare.net/DevopsCon/using-elastic-to-monitor-everything-christoph-wurm-elastic-devopsdays-tel-aviv-2016#14&quot;&gt;(링크)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/images/elastic_stack_overview/1_developing_elastic_stack_simple.png&quot; alt=&quot;1_developing_elastic_stack_simple&quot; class=&quot;center-image&quot; /&gt;
&lt;img src=&quot;/images/elastic_stack_overview/2_developing_elastic_stack_additional_processing.png&quot; alt=&quot;2_developing_elastic_stack_additional_processing&quot; class=&quot;center-image&quot; /&gt;
&lt;img src=&quot;/images/elastic_stack_overview/3_developing_elastic_stack_deployment_at_scale.png&quot; alt=&quot;3_developing_elastic_stack_deployment_at_scale&quot; class=&quot;center-image&quot; /&gt;
&lt;img src=&quot;/images/elastic_stack_overview/3_developing_elastic_stack_deployment_in_the_enterprise.png&quot; alt=&quot;3_developing_elastic_stack_deployment_in_the_enterprise&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
christoph-wurm(Elastic Solution Architecter) : &lt;a href=&quot;https://www.slideshare.net/DevopsCon/using-elastic-to-monitor-everything-christoph-wurm-elastic-devopsdays-tel-aviv-2016&quot;&gt;https://www.slideshare.net/DevopsCon/using-elastic-to-monitor-everything-christoph-wurm-elastic-devopsdays-tel-aviv-2016&lt;/a&gt; &lt;br /&gt;
Elastic : &lt;a href=&quot;https://www.elastic.co/guide/en/elastic-stack/current/elastic-stack.html&quot;&gt;https://www.elastic.co/guide/en/elastic-stack/current/elastic-stack.html&lt;/a&gt; &lt;br /&gt;
Elastic : &lt;a href=&quot;https://www.elastic.co/guide/en/beats/libbeat/5.5/beats-reference.html&quot;&gt;https://www.elastic.co/guide/en/beats/libbeat/5.5/beats-reference.html&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="elastic" /><summary type="html"></summary></entry></feed>