<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-17T19:34:08+09:00</updated><id>http://localhost:4000/</id><title type="html">17billion</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Kubernetes Token 생성하기</title><link href="http://localhost:4000/kubernetes/2019/05/22/kubernetes_create_token.html" rel="alternate" type="text/html" title="Kubernetes Token 생성하기" /><published>2019-05-22T19:31:12+09:00</published><updated>2019-05-22T19:31:12+09:00</updated><id>http://localhost:4000/kubernetes/2019/05/22/kubernetes_create_token</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/05/22/kubernetes_create_token.html">&lt;h3 id=&quot;kubernetes-token-생성하기&quot;&gt;Kubernetes Token 생성하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Token : kubeadm join 시 사용되는 Key&lt;/li&gt;
  &lt;li&gt;최초 kubeadm 후에 생기는 Token은 유효기간이 짧아 원하는 기간으로 재생성 시켜줘야함&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Token 생성 (ttl은 만료기간 / 1m, 3h 등으로 설정 가능하며 0일 경우 만료기간이 없음)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubeadm token create –ttl 0&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wo512h.oqpo4lrad31sst8v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;생성된 Token 조회
    &lt;blockquote&gt;
      &lt;p&gt;$ kubeadm token list&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TOKEN                     TTL         EXPIRES   USAGES                   DESCRIPTION   EXTRA GROUPS
wo512h.oqpo4lrad31sst8v   &amp;lt;forever&amp;gt;   &amp;lt;never&amp;gt;   authentication,signing   &amp;lt;none&amp;gt;        system:bootstrappers:kubeadm:default-node-token

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">Kubernetes Token 생성하기 Token : kubeadm join 시 사용되는 Key 최초 kubeadm 후에 생기는 Token은 유효기간이 짧아 원하는 기간으로 재생성 시켜줘야함</summary></entry><entry><title type="html">Kubernetes Init / Join 시 Label 설정하기</title><link href="http://localhost:4000/kubernetes/2019/05/12/kubernetes_kubelet_label.html" rel="alternate" type="text/html" title="Kubernetes Init / Join 시 Label 설정하기" /><published>2019-05-12T18:21:42+09:00</published><updated>2019-05-12T18:21:42+09:00</updated><id>http://localhost:4000/kubernetes/2019/05/12/kubernetes_kubelet_label</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/05/12/kubernetes_kubelet_label.html">&lt;h3 id=&quot;label-설정추가-된-상태로-init--join-시키는-방법&quot;&gt;Label 설정추가 된 상태로 Init / Join 시키는 방법&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;해당 노드(master 예시) &amp;gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 파일에 설정 추가하기 (아래 –node-labels=labelTest=True 부분)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@master:~# sudo cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
# Note: This dropin only works with kubeadm and kubelet v1.11+
[Service]
Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;
Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;
Environment=&quot;KUBELET_EXTRA_ARGS=--fail-swap-on=false --node-labels=labelTest=True&quot;
# This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
EnvironmentFile=-/etc/default/kubelet
ExecStart=
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kubeadm init or join 진행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;적용 확인
$ kubectl describe node master | grep label
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 labelTest=True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">Label 설정추가 된 상태로 Init / Join 시키는 방법 해당 노드(master 예시) &amp;gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 파일에 설정 추가하기 (아래 –node-labels=labelTest=True 부분) user@master:~# sudo cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf # Note: This dropin only works with kubeadm and kubelet v1.11+ [Service] Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot; Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot; Environment=&quot;KUBELET_EXTRA_ARGS=--fail-swap-on=false --node-labels=labelTest=True&quot; # This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file. EnvironmentFile=-/etc/default/kubelet ExecStart= ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS</summary></entry><entry><title type="html">Kubernetes Control-Plane Node에 Pod 띄울수 있는 방법 (Taints)</title><link href="http://localhost:4000/kubernetes/2019/04/24/kubernetes_control_plane_working.html" rel="alternate" type="text/html" title="Kubernetes Control-Plane Node에 Pod 띄울수 있는 방법 (Taints)" /><published>2019-04-24T18:21:42+09:00</published><updated>2019-04-24T18:21:42+09:00</updated><id>http://localhost:4000/kubernetes/2019/04/24/kubernetes_control_plane_working</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/04/24/kubernetes_control_plane_working.html">&lt;h3 id=&quot;kubernetes-control-plane-node에-pod-올리는-방법&quot;&gt;Kubernetes Control-Plane Node에 Pod 올리는 방법&lt;/h3&gt;

&lt;h4 id=&quot;1-control-plane-node에--pod를-올릴경우-아래처럼-pending-상태로-진행되지-않음-테스트를-위해-contrl-plane-node만-ready인-상태로-진행&quot;&gt;1) Control-Plane Node에  Pod를 올릴경우 아래처럼 Pending 상태로 진행되지 않음 (테스트를 위해 Contrl-Plane Node만 Ready인 상태로 진행)&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;deployment yaml 생성
    &lt;blockquote&gt;
      &lt;p&gt;$ vi nginx-deployment.yaml &lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Apply
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl apply -f nginx-deployment.yaml&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deployment.apps/nginx-deployment created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 상태 확인 (Pending 상태로 지속 됨)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl get pods&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-6dd86d77d-4rkhf   0/1     Pending   0          20m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 상태 자세히 확인  (Pod Name은 3. 참고)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl describe pod nginx-deployment-6dd86d77d-4rkhf&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name:               nginx-deployment-6dd86d77d-4rkhf                                     
Namespace:          default                                                              
.
... 생략
Events:                                                                                                                                        
  Type     Reason            Age                 From               Message                                                                    
  ----     ------            ----                ----               -------                                                                    
  Warning  FailedScheduling  43s (x17 over 22m)  default-scheduler  0/3 nodes are available: 3 node(s) had taints that the pod didn't tolerate.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-위처럼-pending-상태로-안올라오는-이유는-contrl-plane-node에-pod를-못-올리도록-설정되어-있기-때문&quot;&gt;2) 위처럼 Pending 상태로 안올라오는 이유는 Contrl-Plane Node에 Pod를 못 올리도록 설정되어 있기 때문&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Contrl-Plane Node 확인 (아래 master는 Contrl-Plane Node Name)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl describe node master | grep Taints&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Taints:             node-role.kubernetes.io/master:NoSchedule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3-pod를-올리고-싶을경우&quot;&gt;3) Pod를 올리고 싶을경우&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Taint 설정 해제
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl taint nodes –all node-role.kubernetes.io/master-&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node/master untainted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 상태 재조회 (자동으로 리스타트 됨)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl get pods -o wide&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                               READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES
nginx-deployment-6dd86d77d-4rkhf   1/1     Running   0          35m   10.244.0.7   master   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;4-다시-pod를-못-올리도록-설정하고-싶은-경우&quot;&gt;4) 다시 Pod를 못 올리도록 설정하고 싶은 경우&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Taint 설정
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl taint nodes master node-role.kubernetes.io=master:NoSchedule&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node/master tainted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl describe node master | grep Taints&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Taints:             node-role.kubernetes.io=master:NoSchedule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">Kubernetes Control-Plane Node에 Pod 올리는 방법</summary></entry><entry><title type="html">Kubernetes 클러스터 설치 및 구성(kube 1.14.1, ubuntu 16.04)</title><link href="http://localhost:4000/kubernetes/2019/04/15/kubernetes_install_exec_14.01.html" rel="alternate" type="text/html" title="Kubernetes 클러스터 설치 및 구성(kube 1.14.1, ubuntu 16.04)" /><published>2019-04-15T11:21:42+09:00</published><updated>2019-04-15T11:21:42+09:00</updated><id>http://localhost:4000/kubernetes/2019/04/15/kubernetes_install_exec_14.01</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/04/15/kubernetes_install_exec_14.01.html">&lt;h3 id=&quot;kubernetes-1141-구성-방법-ubuntu-1604&quot;&gt;kubernetes 1.14.1 구성 방법 (ubuntu 16.04)&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;클러스터 구성 예시&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IP Address&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.56.101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;control-plane Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.56.102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Worker Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.56.103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Worker Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1-k8s-설치-전체-노드-실행&quot;&gt;1) k8s 설치 (전체 노드 실행)&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Docker 설치 : 지난 글 참고 “&lt;a href=&quot;/docker/2019/01/10/docker_swarm.html&quot;&gt;Docker 설치 참고 (docker-ce=18.06.1~ce~3-0~ubuntu)&lt;/a&gt;” &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;$ sudo apt install apt-transport-https&lt;/li&gt;
  &lt;li&gt;$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add&lt;/li&gt;
  &lt;li&gt;$ sudo add-apt-repository “deb https://apt.kubernetes.io/ kubernetes-$(lsb_release -cs) main”&lt;/li&gt;
  &lt;li&gt;$ sudo apt update&lt;/li&gt;
  &lt;li&gt;$ sudo apt install kubelet=1.14.1-00 kubeadm=1.14.1-00 kubectl=1.14.1-00 kubernetes-cni=0.7.5-00&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-control-plane-node-구-master-node-구성&quot;&gt;2) Control Plane Node (구 Master Node) 구성&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;kubeadm-config.yaml 파일 생성 (아래 control-plane-node 부분은 Bode IP나 HA구성을 할 경우 연결 시킬 LB 주소를 입력)
    &lt;blockquote&gt;
      &lt;p&gt;$ vi kubeadm-config.yaml&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: kubeadm.k8s.io/v1beta1
kind: ClusterConfiguration
kubernetesVersion: v1.14.1
controlPlaneEndpoint: 192.168.56.101:6443
networking:
  podSubnet: 10.244.0.0/16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;생성된 파일을 이용하여 초기화
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo kubeadm init –config=kubeadm-config.yaml –experimental-upload-certs&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;결과 : 
... 생략
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join 192.168.56.101:6443 --token tf9afj.p3hglea5pdk4v23m \
    --discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb01137e8e78 \
    --experimental-control-plane --certificate-key f4fdb1c3d25baa05eef7c5cd92f49e0d01425679da7871b760ddee33eaaddf57

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
&quot;kubeadm init phase upload-certs --experimental-upload-certs&quot; to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.56.101:6443 --token tf9afj.p3hglea5pdk4v23m \
    --discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb01137e8e78
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ mkdir -p $HOME/.kube &lt;br /&gt;
  $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config &lt;br /&gt;
  $ sudo chown $(id -u):$(id -g) $HOME/.kube/config &lt;br /&gt;
  :: kubectl 명령어를 사용하고 싶은 계정에서 실행 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ kubeadm join 192.168.56.101:6443 –token tf9afj.p3hglea5pdk4v13m \ &lt;br /&gt;
    –discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb0113123 \ &lt;br /&gt;
    –experimental-control-plane –certificate-key f4fdb1c3d25baa05eef7c5cd92f49e0d01425679da7871b760ddee33eaa123 &lt;br /&gt;
  :: 타 노드에서 Control-Plane Node로 HA로 구성하고 싶을 경우 실행 (전체가 한개의 명령어) &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ kubeadm join 192.168.56.101:6443 –token tf9afj.p3hglea5pdk4v13m \ &lt;br /&gt;
    –discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb0113123&lt;br /&gt;
  :: 타 노드에서 일반 Worker Node로 올릴 경우 실행 (전체가 한개의 명령어) &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;3-worker-node-구성&quot;&gt;3) Worker Node 구성&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;위 명령어 중
    &lt;blockquote&gt;
      &lt;p&gt;$ kubeadm join 192.168.56.101:6443 –token tf9afj.p3hglea5pdk4v13m \ &lt;br /&gt;
 –discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb0113123 &lt;br /&gt;
  위 형식의 명령어를 실행 &lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;4-cluster-구성-확인-control-plane-node에서-실행&quot;&gt;4) Cluster 구성 확인 (Control-Plane Node에서 실행)&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;kubectl get nodes
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl get nodes&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME     STATUS     ROLES    AGE   VERSION
master   Ready      master   1h   v1.14.1
node1    Ready   &amp;lt;none&amp;gt;   1h   v1.14.1
node2    Ready   &amp;lt;none&amp;gt;   1h   v1.14.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;toubleshooting&quot;&gt;Toubleshooting&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;coredns가 안떠서 NotReady 상태인 경우
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;running with swap on is not supported. Please disable swap 이 메세지가 뜰 경우
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo swapoff -a&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">kubernetes 1.14.1 구성 방법 (ubuntu 16.04)</summary></entry><entry><title type="html">Docker Swarm : 특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기 (constraint 옵션)</title><link href="http://localhost:4000/docker/2019/03/12/docker_constraint.html" rel="alternate" type="text/html" title="Docker Swarm : 특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기 (constraint 옵션)" /><published>2019-03-12T03:31:42+09:00</published><updated>2019-03-12T03:31:42+09:00</updated><id>http://localhost:4000/docker/2019/03/12/docker_constraint</id><content type="html" xml:base="http://localhost:4000/docker/2019/03/12/docker_constraint.html">&lt;h3 id=&quot;특정-조건hostname-role-labels-등을-지정하여-컨테이너-올리기&quot;&gt;특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기&lt;/h3&gt;
&lt;p&gt;예시) “node1” Node에만 컨테이너 올리기, Manager Node에만 컨테이너 올리기 등&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시 1) &quot;node1&quot; Node에만 컨테이너 올리기
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 2
      placement:
        constraints: [node.hostname == node1]
    networks:
      - nginx

networks:
  nginx:

user@master:/scloud/docker/yaml$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
lzc7bkkg9kpc        test_nginx          replicated          2/2                 nginx:latest        *:80-&amp;gt;80/tcp, *:443-&amp;gt;443/tcp
user@master:/scloud/docker/yaml$ docker service ps test_nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
lkxuit71s0l9        test_nginx.1        nginx:latest        node1               Running             Running 23 minutes ago
t357q0jes2sk        test_nginx.2        nginx:latest        node1               Running             Running 13 seconds ago


예시 2) Manager Node에만 컨테이너 올리기 (Manager Node : Master, Node2)
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
    networks:
      - nginx

networks:
  nginx:

user@master:/scloud/docker/yaml$ docker stack deploy -c docker-compose.yml test
Updating service test_nginx (id: lzc7bkkg9kpckr0je715iw0r4)

user@master:/scloud/docker/yaml$ docker service ps test_nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR               PORTS
2eao19s4q53m        test_nginx.1        nginx:latest        node2               Running             Running 19 seconds ago
lkxuit71s0l9         \_ test_nginx.1    nginx:latest        node1               Shutdown            Shutdown 20 seconds ago
ji20e0d966qq        test_nginx.2        nginx:latest        master              Running             Running 23 seconds ago
t357q0jes2sk         \_ test_nginx.2    nginx:latest        node1               Shutdown            Shutdown 24 seconds ago

user@master:/scloud/docker/yaml$ docker service ps test_nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
2eao19s4q53m        test_nginx.1        nginx:latest        node2               Running             Running 4 minutes ago
ji20e0d966qq        test_nginx.2        nginx:latest        master              Running             Running 4 minutes ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;옵션 종류(https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-placement-preferences-placement-pref 참고)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;node&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;attribute&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;matches	example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.id&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Node ID&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.id==2ivku8v2gvtg4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.hostname&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Node hostname&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.hostname!=node-2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.role&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Node role&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.role==manager&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;user defined node labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.labels.security==high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;engine.labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Docker Engine’s labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;engine.labels.operatingsystem==ubuntu 14.04&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-placement-preferences-placement-pref&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기 예시) “node1” Node에만 컨테이너 올리기, Manager Node에만 컨테이너 올리기 등</summary></entry><entry><title type="html">Docker Swarm : yaml 파일을 이용하여 Service 올리기</title><link href="http://localhost:4000/docker/2019/02/25/docker_swarm_stack_yaml.html" rel="alternate" type="text/html" title="Docker Swarm : yaml 파일을 이용하여 Service 올리기" /><published>2019-02-25T03:31:42+09:00</published><updated>2019-02-25T03:31:42+09:00</updated><id>http://localhost:4000/docker/2019/02/25/docker_swarm_stack_yaml</id><content type="html" xml:base="http://localhost:4000/docker/2019/02/25/docker_swarm_stack_yaml.html">&lt;h3 id=&quot;docker-swarm--yaml-파일을-이용하여-service-올리기&quot;&gt;Docker Swarm : yaml 파일을 이용하여 Service 올리기&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;(Manager Node) $ docker stack deploy [OPTIONS] STACK&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시) nginx 컨테이너 2EA 올리기
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 2
    networks:
      - nginx

networks:
  nginx:

user@master:/scloud/docker/yaml$ docker stack deploy --compose-file docker-compose.yml test
Creating network test_nginx
Creating service test_nginx

user@master:/scloud/docker/yaml$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
lzc7bkkg9kpc        test_nginx          replicated          2/2                 nginx:latest        *:80-&amp;gt;80/tcp, *:443-&amp;gt;443/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;추가 예시) 배포된 서비스에서 Scale 1EA로 변경하기
1. 위 yml파일에서 replicas &amp;gt; 1로 변경
2. $ docker stack deploy --compose-file docker-compose.yml test
아래 참고.
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 1
    networks:
      - nginx

networks:
  nginx:
user@master:/scloud/docker/yaml$ docker stack deploy -c docker-compose.yml test
Updating service test_nginx (id: lzc7bkkg9kpckr0je715iw0r4)
user@master:/scloud/docker/yaml$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
lzc7bkkg9kpc        test_nginx          replicated          1/1                 nginx:latest        *:80-&amp;gt;80/tcp, *:443-&amp;gt;443/tcp

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/stack_deploy/&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm : yaml 파일을 이용하여 Service 올리기 (Manager Node) $ docker stack deploy [OPTIONS] STACK</summary></entry><entry><title type="html">Docker Swarm : Worker Node를 Manager Node로 승격시키기</title><link href="http://localhost:4000/docker/2019/02/05/docker_swarm_promote.html" rel="alternate" type="text/html" title="Docker Swarm : Worker Node를 Manager Node로 승격시키기" /><published>2019-02-05T01:31:42+09:00</published><updated>2019-02-05T01:31:42+09:00</updated><id>http://localhost:4000/docker/2019/02/05/docker_swarm_promote</id><content type="html" xml:base="http://localhost:4000/docker/2019/02/05/docker_swarm_promote.html">&lt;h3 id=&quot;docker-swarm--worker-nodenode2를-manager-node로-승격시키기&quot;&gt;Docker Swarm : Worker Node(Node2)를 Manager Node로 승격시키기&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;(Manager Node에서 실행) $ docker node promote NODE [NODE…]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시)
user@master:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
oczmgznj47bd58abjmrql4gc5 *   master              Ready               Active              Leader              18.06.1-ce
z0afqkd570azc1pppxg1b6gsl     node1               Ready               Active                                  18.06.1-ce
zuz034mvcr2owqb7q4zgw3dn2     node2               Ready               Active                                  18.06.1-ce

user@master:~$ docker node promote node2
Node node2 promoted to a manager in the swarm.

user@master:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
oczmgznj47bd58abjmrql4gc5 *   master              Ready               Active              Leader              18.06.1-ce
z0afqkd570azc1pppxg1b6gsl     node1               Ready               Active                                  18.06.1-ce
zuz034mvcr2owqb7q4zgw3dn2     node2               Ready               Active              Reachable           18.06.1-ce

user@node2:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
f1ii0n7slud7        nginx_service       replicated          1/1                 nginx:latest

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/node_promote/&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm : Worker Node(Node2)를 Manager Node로 승격시키기 (Manager Node에서 실행) $ docker node promote NODE [NODE…]</summary></entry><entry><title type="html">Docker Swarm : Scale In-Out 명령어</title><link href="http://localhost:4000/docker/2019/01/17/docker_scale_swarm_in_out.html" rel="alternate" type="text/html" title="Docker Swarm : Scale In-Out 명령어" /><published>2019-01-17T12:31:42+09:00</published><updated>2019-01-17T12:31:42+09:00</updated><id>http://localhost:4000/docker/2019/01/17/docker_scale_swarm_in_out</id><content type="html" xml:base="http://localhost:4000/docker/2019/01/17/docker_scale_swarm_in_out.html">&lt;h3 id=&quot;docker-swarm-scale-in-out&quot;&gt;Docker Swarm Scale In-Out&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker service scale SERVICE=REPLICAS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시)
0EA로 Scale In $ docker service scale nginx_service=0
3EA로 Scale Out $ docker service scale nginx_service=3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/service_scale/&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm Scale In-Out $ docker service scale SERVICE=REPLICAS</summary></entry><entry><title type="html">Docker Swarm 구성하기</title><link href="http://localhost:4000/docker/2019/01/10/docker_swarm.html" rel="alternate" type="text/html" title="Docker Swarm 구성하기" /><published>2019-01-10T12:31:42+09:00</published><updated>2019-01-10T12:31:42+09:00</updated><id>http://localhost:4000/docker/2019/01/10/docker_swarm</id><content type="html" xml:base="http://localhost:4000/docker/2019/01/10/docker_swarm.html">&lt;h3 id=&quot;docker-swarm-이란&quot;&gt;Docker Swarm 이란&lt;/h3&gt;
&lt;p&gt;Container Orchestration 중 하나로 Docker v1.12 이후부터 Swarm Mode가 통합되면서 쉽게 구성이 가능해짐
클러스터를 관리하는 Manager Node와 실제 컨테이너를 실행하는 Worker Node가 있음
&lt;img src=&quot;\images\docker_swarm\swarm-diagram.png&quot; alt=&quot;docker_Swarm&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Manager Node 역할&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;클러스터 상태 유지&lt;/li&gt;
    &lt;li&gt;스케줄링 서비스&lt;/li&gt;
    &lt;li&gt;HTTP API Endpoints 제공&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Manager Node 구성 중 확인사항&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;기본적으로 3EA의 Manager Node는 1EA Stop 허용&lt;/li&gt;
    &lt;li&gt;5EA의 Manager Node는 최대 2EA Stop 허용&lt;/li&gt;
    &lt;li&gt;N EA의 Manager Node 최대 Stop 허용 갯수 :  (N-1)/2&lt;/li&gt;
    &lt;li&gt;Docker는 최대 7EA의 Manager Node를 권장&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;※ Manager Node를 추가한다고해서 확장성또는 성능이 향상되진 않음. 일반적으로 그 반대가 사실.&lt;/p&gt;

&lt;h3 id=&quot;docker-swarm-구성-manager-node-1ea-worker-node-2ea-&quot;&gt;Docker Swarm 구성 (Manager Node 1EA Worker Node 2EA) &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Master &amp;gt; Manager Node(192.168.56.101) &lt;br /&gt;
node1 &amp;gt;  Worker Node(192.168.56.102) &lt;br /&gt;
node2 &amp;gt; Worker Node(192.168.56.103) &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;docker-설치&quot;&gt;Docker 설치&lt;/h4&gt;
&lt;p&gt;(https://17billion.github.io/docker/2017/03/10/docker_install_exec.html 참고)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;18.06.1-ce 설치
1. $ sudo apt-get update
2. $ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
3. $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg \| sudo apt-key add - 
4. $ sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
5. $ sudo apt-get update
6. $ sudo apt-get install docker-ce=18.06.1~ce~3-0~ubuntu
7. $ sudo usermod -aG docker $USER 
   (현재 사용자에게 권한부여)
8. (재 로그인 후) $ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;swarm-init-manager-node&quot;&gt;Swarm init (Manager Node)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker swarm init --advertise-addr 
예시) user@master:~$ docker swarm init --advertise-addr 192.168.56.101
결과
Swarm initialized: current node (oczmgznj47bd58abjmrql4gc5) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-1pud4gaae2bvwkqhbk1fngfsrw55v074lzoqd8fn31wxgmf0vj-egtud2vn5iam21giwki5kqxev 192.168.56.101:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;swarm-join-worker-node&quot;&gt;Swarm join (Worker Node)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;위 결과에서 나온 명령어 실행
예시) user@node2:~$ docker swarm join --token SWMTKN-1-1pud4gaae2bvwkqhbk1fngfsrw55v04lzoqd8fn31wxgmf0vj-egtud2vn5iam21giwki5kqxev 192.168.56.101:2377
This node joined a swarm as a worker.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;확인-nginx-3ea-생성&quot;&gt;확인 (nginx 3EA 생성)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. (Manager Node) user@master:~$ docker service create --name nginx_service --replicas 3 nginx
2. $ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
f1ii0n7slud7        nginx_service       replicated          3/3                 nginx:latest
3. $ docker service ps nginx_service 
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
v4sctczj607a        nginx_service.1     nginx:latest        master              Running             Running 56 seconds ago
neeyipblvb3i        nginx_service.2     nginx:latest        node1               Running             Running about a minute ago
qzorauvtvja3        nginx_service.3     nginx:latest        node2               Running             Running 59 seconds ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※ Swarm 탈퇴하기
$ docker swarm leave&lt;/p&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
docker.com : https://docs.docker.com/engine/reference/commandline/swarm_init/ &lt;br /&gt;
subicura님 블로그 : https://subicura.com/2017/02/25/container-orchestration-with-docker-swarm.html &lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm 이란 Container Orchestration 중 하나로 Docker v1.12 이후부터 Swarm Mode가 통합되면서 쉽게 구성이 가능해짐 클러스터를 관리하는 Manager Node와 실제 컨테이너를 실행하는 Worker Node가 있음</summary></entry><entry><title type="html">InfluxDB(1.6.3), Telegraf(1.7.4), Grafana(5.2.4)를 이용한 서버 모니터링 하기</title><link href="http://localhost:4000/grafana/2018/11/28/influx_telegraf_grafana.html" rel="alternate" type="text/html" title="InfluxDB(1.6.3), Telegraf(1.7.4), Grafana(5.2.4)를 이용한 서버 모니터링 하기" /><published>2018-11-28T02:21:42+09:00</published><updated>2018-11-28T02:21:42+09:00</updated><id>http://localhost:4000/grafana/2018/11/28/influx_telegraf_grafana</id><content type="html" xml:base="http://localhost:4000/grafana/2018/11/28/influx_telegraf_grafana.html">&lt;h3 id=&quot;구성&quot;&gt;구성&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/grafana/0.png&quot; alt=&quot;0&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;influxdb-설치-및-실행-163&quot;&gt;InfluxDB 설치 및 실행 (1.6.3)&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;$ wget https://dl.influxdata.com/influxdb/releases/influxdb_1.6.3_amd64.deb &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ sudo dpkg -i influxdb_1.6.3_amd64.deb &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add - &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ source /etc/lsb-release &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ echo “deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable” | sudo tee /etc/apt/sources.list.d/influxdb.list &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;(실행) $ sudo service influxdb start &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;(확인) $ influx &lt;br /&gt;
Connected to http://localhost:8086 version 1.6.3 &lt;br /&gt;
InfluxDB shell version: 1.6.3 &lt;br /&gt;
\ &amp;gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;telegraf174-설치-및-실행&quot;&gt;telegraf(1.7.4) 설치 및 실행&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;$ wget https://dl.influxdata.com/telegraf/releases/telegraf_1.7.4-1_amd64.deb &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ sudo dpkg -i telegraf_1.7.4-1_amd64.deb &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;(확인) $ ps -ef | grep telegraf &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;(InfluxDB 설정) $ sudo vi /etc/telegraf/telegraf.conf &lt;br /&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[outputs.influxdb]]
  urls = [&quot;http://{$influxDB ip 넣기}:8086&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;(재시작) $ sudo service telegraf restart&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;grafana-설치-및-실행&quot;&gt;Grafana 설치 및 실행&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;$ wget https://dl.influxdata.com/telegraf/releases/telegraf_1.7.4_amd64.deb &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ sudo apt-get install -y adduser libfontconfig &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ sudo dpkg -i grafana_5.2.4_amd64.deb &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;$ sudo service grafana-server status &lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;접속 : http://{grafana ip}:3000/login 접속 (환경설정 : /etc/grafana/grafana.ini) &lt;br /&gt;
      &lt;ul&gt;
        &lt;li&gt;계정 : admin / admin
&lt;img src=&quot;/images/grafana/1 login.png&quot; alt=&quot;1_login&quot; /&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;※ Grafana 설치 진행 중 아래처럼 오류가 날경우 $ sudo apt-get -f install 실행 필요
Unpacking grafana (5.2.4) over (5.2.4) ...
dpkg: dependency problems prevent configuration of grafana:
 grafana 패키지는 다음 패키지에 의존: libfontconfig: 하지만:
  libfontconfig 패키지는 설치하지 않았습니다.

dpkg: error processing package grafana (--install):
 의존성 문제 - 설정하지 않고 남겨둠
Processing triggers for systemd (229-4ubuntu21.16) ...
Processing triggers for ureadahead (0.100.0-19) ...
처리하는데 오류가 발생했습니다:
 grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;grafana-dashboard-만들기&quot;&gt;Grafana Dashboard 만들기&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Datasource 생성 메뉴 선택&lt;br /&gt;
&lt;img src=&quot;/images/grafana/2 select_datasource.png&quot; alt=&quot;2 select_datasource&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;Add 버튼 클릭&lt;br /&gt;
&lt;img src=&quot;/images/grafana/3 add_datasource.png&quot; alt=&quot;3 add_datasource&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;설정 후 Save &amp;amp; Test 클릭 &lt;br /&gt;
&lt;img src=&quot;/images/grafana/4 setting_datasource.png&quot; alt=&quot;4 setting_datasource&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;Telegraf Dashboard Import&lt;br /&gt;
&lt;img src=&quot;/images/grafana/5 import_dashboard.png&quot; alt=&quot;5 import_dashboard&quot; /&gt;
&lt;img src=&quot;/images/grafana/6 import_dashboard_2.png&quot; alt=&quot;6 import_dashboard_2&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;Dashboard&lt;br /&gt;
 &lt;img src=&quot;/images/grafana/7 dashboard.png&quot; alt=&quot;7 dashboard_2&quot; /&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;
YENA WORLD : https://yenaworldblog.wordpress.com/2017/07/28/influxdb/ &lt;br /&gt;
grafana : https://grafana.com/grafana/download/5.2.4?platform=linux &lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="grafana" /><summary type="html">구성</summary></entry></feed>