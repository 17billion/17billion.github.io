<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-17T21:38:28+09:00</updated><id>http://localhost:4000/</id><title type="html">17billion</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">OSI 7 계층</title><link href="http://localhost:4000/network/2019/06/13/network_osi.html" rel="alternate" type="text/html" title="OSI 7 계층" /><published>2019-06-13T21:28:12+09:00</published><updated>2019-06-13T21:28:12+09:00</updated><id>http://localhost:4000/network/2019/06/13/network_osi</id><content type="html" xml:base="http://localhost:4000/network/2019/06/13/network_osi.html">&lt;h3 id=&quot;osi-7계층&quot;&gt;OSI 7계층&lt;/h3&gt;
&lt;p&gt;http://blog.naver.com/PostView.nhn?blogId=demonicws&amp;amp;logNo=40117378644&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OSI란 네트워크 통신의 개발 시스템 상호 연결(Open Systems Interconnection)을 의미&lt;/li&gt;
  &lt;li&gt;같은 회사의 제품에서만 연결이 가능했던 과거에서 벗어나 제품이나 회사상관없이 연결이 가능하도록 ISO(국제 표준화 기구)에서 표준화 제시&lt;/li&gt;
  &lt;li&gt;데이터를 전송할 때 각각의 층마다 인식할수 있어야 하는 헤더를 붙이게 되는데 이러한 과정을 캡슐화라고 함 (반대는 디캡슐화)&lt;/li&gt;
  &lt;li&gt;출발지에서 데이터가 전송될 때 헤더가 씌워질 때 캡슐화가 되고 2계층에서민 오류제어를 위헤 테일(꼬리부위) 부분이 씌워짐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/network_osi/osi_7_layer.png&quot; alt=&quot;OSI 7 LAYER&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;계층&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Layer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;단위 / 프로토콜&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;응용&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;서비스 /FTP, HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;표현&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;확장자 / JPEG, MPEG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;세션&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;포트 / SSH&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;전송&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;세그먼트 / TCP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;네트워크&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;패킷 / IP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;데이터&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;프레임 / MAC, PPP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1계층&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;물리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;비트 / 이더넷&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TIM 님 블로그 : http://blog.naver.com/PostView.nhn?blogId=demonicws&amp;amp;logNo=40117378644&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="network" /><summary type="html">OSI 7계층 http://blog.naver.com/PostView.nhn?blogId=demonicws&amp;amp;logNo=40117378644 OSI란 네트워크 통신의 개발 시스템 상호 연결(Open Systems Interconnection)을 의미 같은 회사의 제품에서만 연결이 가능했던 과거에서 벗어나 제품이나 회사상관없이 연결이 가능하도록 ISO(국제 표준화 기구)에서 표준화 제시 데이터를 전송할 때 각각의 층마다 인식할수 있어야 하는 헤더를 붙이게 되는데 이러한 과정을 캡슐화라고 함 (반대는 디캡슐화) 출발지에서 데이터가 전송될 때 헤더가 씌워질 때 캡슐화가 되고 2계층에서민 오류제어를 위헤 테일(꼬리부위) 부분이 씌워짐</summary></entry><entry><title type="html">TCP (Transmission Control Protocol)</title><link href="http://localhost:4000/network/2019/06/02/network_tcp.html" rel="alternate" type="text/html" title="TCP (Transmission Control Protocol)" /><published>2019-06-02T20:20:12+09:00</published><updated>2019-06-02T20:20:12+09:00</updated><id>http://localhost:4000/network/2019/06/02/network_tcp</id><content type="html" xml:base="http://localhost:4000/network/2019/06/02/network_tcp.html">&lt;h3 id=&quot;tcp-전송-제어-프로토콜-transmission-control-protocol&quot;&gt;TCP (전송 제어 프로토콜, Transmission Control Protocol)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷 프로토콜 (IP)의 핵심 프로토콜 중 하나로 IP와 함께 TCP/IP라는 명칭으로도 널리 불림. TCP는 근거리 통신망이나 인트라넷, 인터넷에 연결된 컴퓨터에서 실행되는 프로그램 간에 일련의 바이트를 안정적이고 순서대로 에러없이 교환할 수 있게 함.&lt;/li&gt;
  &lt;li&gt;전송 계층에 위치하며 네트워크의 정보 전달을 통제하는 프로토콜이자 인터넷을 이루는 핵심 프로토콜의 하나&lt;/li&gt;
  &lt;li&gt;TCP의 안정성을 필요로 하지 않는 애플리케이션의 경우 일반적으로 TCP 대신 비접속형 사용자 데이터그램 프로토콜(User Datagram Protocol)을 사용. UDP는 전달 확인 및 순차 보장 기능이 없는 대신 오버헤드가 작고 지연시간이 짧다는 장점이 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcp-세그먼트-구조-위키-참고&quot;&gt;TCP 세그먼트 구조 (&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%84%EC%86%A1_%EC%A0%9C%EC%96%B4_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C&quot;&gt;위키 참고&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 스트림으로부터 데이터를 받아 들여 이것을 청크 단위로 분할한 뒤 TCP 헤더를 덧붙여 TCP 세그먼트를 생성. TCP 세그먼트는 IP 데이터그램에 캡슐화되어 상대방과 주고 받게 됨.&lt;/li&gt;
  &lt;li&gt;TCP 패킷이라는 용어가 종종 사용되지만 이는 정확한 표현이 아님. 세그먼트가 TCP프로토콜 데이터 유닛(PDU)을 의미하는 정확한 표현이며 데이터그램은 IP PDU를, 프레임은 데이터 링크 계층 PDU를 의미함. 
&lt;img src=&quot;/images/network_tcp/tcp_header.png&quot; alt=&quot;tcp header&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcp-연결-설정-3-way-handshake&quot;&gt;TCP 연결 설정 (3 Way-Handshake)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;연결을 설정하기 위해 TCP는 3 Way-Handshake를 사용. 클라이언트가 서버와 연결을 시도하기 전에 서버는 먼저 포트를 바인드하고 청취하여 연결을 위해 포트를 열어야함(수동 열기). 수동 열기가 설정되면 클라이언트는 활성 열기를 시작할 수 있고 연결을 설정하기 위해 3 Way-Handshake가 발생&lt;/li&gt;
  &lt;li&gt;1) SYN : 활성 열기는 클라이언트가 서버에 SYN을 전송하여 수행. 클라이언트는 세그먼트의 시퀀스 번호를 임의의 값 A로 설정.&lt;/li&gt;
  &lt;li&gt;2) SYN-ACK : 이에 대한 응답으로 서버는 SYN-ACK로 응답. 수신 확인 번호는 수신 된 시퀀스 번호, 즉 A + 1보다 하나 이상으로 설정되고, 서버가 패킷에 대해 선택하는 시퀀스 번호는 다른 임의의 번호 B로 설정.&lt;/li&gt;
  &lt;li&gt;3) ACK : 마지막으로 클라이언트는 서버로 ACK를 다시 보냄. 시퀀스 번호는 수신 된 확인 응답 값, 즉 A + 1로 설정되고, 확인 응답 번호는 수신 된 시퀀스 번호, 즉 B + 1보다 하나 이상으로 설정됨.&lt;/li&gt;
  &lt;li&gt;위 시점에서 클라이언트와 서버 모두 연결에 대한 승인을 받게됨. 단계 1, 2는 한 방향에 대한 연결 매개 변수 (시퀀스 번호)를 설정하고 승인됨. 단계 2, 3은 다른 방향에 대한 연결 파라미터 (시퀀스 번호)를 설정하고 인정. 이것에 의해, 전이중 통신이 확립됨.&lt;/li&gt;
  &lt;li&gt;link
    &lt;ul&gt;
      &lt;li&gt;https://mindnet.tistory.com/entry/네트워크-쉽게-이해하기-22편-TCP-3-WayHandshake-4-WayHandshake &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;https://www.geeksforgeeks.org/tcp-3-way-handshake-process/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcp-연결-종료-4-way-handshake&quot;&gt;TCP 연결 종료 (4 Way-Handshake)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;연결 종료 단계는 4 Way-Handshake를 사용하며 연결의 각면이 독립적으로 종료. 끝 점이 연결의 절반을 멈추고 자 할 때 FIN 패킷을 전송하고 다른 쪽 끝은 ACK로 확인. 따라서 일반적인 분류에는 각 TCP 끝점에서 한 쌍의 FIN 및 ACK 세그먼트가 필요. 첫 번째 FIN을 보낸 측이 최종 ACK로 응답 한 후, 마지막 연결을 종료하기 전에 시간 종료를 기다린 후 로컬 포트를 새 연결에 사용할 수 없음.?이렇게하면 후속 연결 중에 지연된 패킷이 전달되어 혼동을 방지 할 수 있음.&lt;/li&gt;
  &lt;li&gt;연결은 “half-open” 일 수 있으며 이 경우 한쪽은 끝을 종료하지만 다른 쪽은 종료하지 않음. 종료 된 쪽은 더 이상 데이터를 연결로 보낼 수 없지만 다른 쪽은 보낼 수 있음. 종단 측은 다른 쪽도 종료 될 때까지 데이터를 계속 읽음.&lt;/li&gt;
  &lt;li&gt;호스트 A가 FIN을 보내고 호스트 B가 FIN &amp;amp; ACK로 응답하고 (단순히 2 단계를 하나로 묶음) 호스트 A가 ACK로 응답하면 3 Way-Handshake로 연결을 종료 할 수도 있음.&lt;/li&gt;
  &lt;li&gt;Close Wait 종료
    &lt;ul&gt;
      &lt;li&gt;커널 옵션으로 타임아웃 조절이 가능한 TIME_WAIT, FIN_WAIT과 달리 CLOSE_WAIT는 포트를 잡고 있는 프로세스의 종료 또는 네트워크 재시작 외에는 제거할 방법이 없음. 즉, 로컬 어플리케이션이 정상적으로 close()를 요청하는 것이 가장 좋은 방법. (http://docs.likejazz.com/close-wait/)&lt;/li&gt;
      &lt;li&gt;Close Wait 상태가 해결되는 것은 신호를 보내거나 네트워크 세션이 끊기는 방법 밖에 없음. 아니면 계속 그 상태로 유지됨 (&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#/media/File:TCP_CLOSE.svg&quot;&gt;그림&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고 사이트 &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%84%EC%86%A1_%EC%A0%9C%EC%96%B4_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C&quot;&gt;wiki&lt;/a&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;sungchan41 님 블로그 : https://mindnet.tistory.com/&lt;/li&gt;
  &lt;li&gt;likejazz 님 블로그 : http://docs.likejazz.com/&lt;/li&gt;
  &lt;li&gt;geeksforgeeks : https://www.geeksforgeeks.org/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="network" /><summary type="html">TCP (전송 제어 프로토콜, Transmission Control Protocol) 인터넷 프로토콜 (IP)의 핵심 프로토콜 중 하나로 IP와 함께 TCP/IP라는 명칭으로도 널리 불림. TCP는 근거리 통신망이나 인트라넷, 인터넷에 연결된 컴퓨터에서 실행되는 프로그램 간에 일련의 바이트를 안정적이고 순서대로 에러없이 교환할 수 있게 함. 전송 계층에 위치하며 네트워크의 정보 전달을 통제하는 프로토콜이자 인터넷을 이루는 핵심 프로토콜의 하나 TCP의 안정성을 필요로 하지 않는 애플리케이션의 경우 일반적으로 TCP 대신 비접속형 사용자 데이터그램 프로토콜(User Datagram Protocol)을 사용. UDP는 전달 확인 및 순차 보장 기능이 없는 대신 오버헤드가 작고 지연시간이 짧다는 장점이 있음.</summary></entry><entry><title type="html">Kubernetes Token 생성하기</title><link href="http://localhost:4000/kubernetes/2019/05/22/kubernetes_create_token.html" rel="alternate" type="text/html" title="Kubernetes Token 생성하기" /><published>2019-05-22T19:31:12+09:00</published><updated>2019-05-22T19:31:12+09:00</updated><id>http://localhost:4000/kubernetes/2019/05/22/kubernetes_create_token</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/05/22/kubernetes_create_token.html">&lt;h3 id=&quot;kubernetes-token-생성하기&quot;&gt;Kubernetes Token 생성하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Token : kubeadm join 시 사용되는 Key&lt;/li&gt;
  &lt;li&gt;최초 kubeadm 후에 생기는 Token은 유효기간이 짧아 원하는 기간으로 재생성 시켜줘야함&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Token 생성 (ttl은 만료기간 / 1m, 3h 등으로 설정 가능하며 0일 경우 만료기간이 없음)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubeadm token create –ttl 0&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wo512h.oqpo4lrad31sst8v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;생성된 Token 조회
    &lt;blockquote&gt;
      &lt;p&gt;$ kubeadm token list&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TOKEN                     TTL         EXPIRES   USAGES                   DESCRIPTION   EXTRA GROUPS
wo512h.oqpo4lrad31sst8v   &amp;lt;forever&amp;gt;   &amp;lt;never&amp;gt;   authentication,signing   &amp;lt;none&amp;gt;        system:bootstrappers:kubeadm:default-node-token

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">Kubernetes Token 생성하기 Token : kubeadm join 시 사용되는 Key 최초 kubeadm 후에 생기는 Token은 유효기간이 짧아 원하는 기간으로 재생성 시켜줘야함</summary></entry><entry><title type="html">Kubernetes Init / Join 시 Label 설정하기</title><link href="http://localhost:4000/kubernetes/2019/05/12/kubernetes_kubelet_label.html" rel="alternate" type="text/html" title="Kubernetes Init / Join 시 Label 설정하기" /><published>2019-05-12T18:21:42+09:00</published><updated>2019-05-12T18:21:42+09:00</updated><id>http://localhost:4000/kubernetes/2019/05/12/kubernetes_kubelet_label</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/05/12/kubernetes_kubelet_label.html">&lt;h3 id=&quot;label-설정추가-된-상태로-init--join-시키는-방법&quot;&gt;Label 설정추가 된 상태로 Init / Join 시키는 방법&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;해당 노드(master 예시) &amp;gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 파일에 설정 추가하기 (아래 –node-labels=labelTest=True 부분)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@master:~# sudo cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
# Note: This dropin only works with kubeadm and kubelet v1.11+
[Service]
Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;
Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;
Environment=&quot;KUBELET_EXTRA_ARGS=--fail-swap-on=false --node-labels=labelTest=True&quot;
# This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
EnvironmentFile=-/etc/default/kubelet
ExecStart=
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kubeadm init or join 진행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;적용 확인
$ kubectl describe node master | grep label
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 labelTest=True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">Label 설정추가 된 상태로 Init / Join 시키는 방법 해당 노드(master 예시) &amp;gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 파일에 설정 추가하기 (아래 –node-labels=labelTest=True 부분) user@master:~# sudo cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf # Note: This dropin only works with kubeadm and kubelet v1.11+ [Service] Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot; Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot; Environment=&quot;KUBELET_EXTRA_ARGS=--fail-swap-on=false --node-labels=labelTest=True&quot; # This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file. EnvironmentFile=-/etc/default/kubelet ExecStart= ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS</summary></entry><entry><title type="html">Kubernetes Control-Plane Node에 Pod 띄울수 있는 방법 (Taints)</title><link href="http://localhost:4000/kubernetes/2019/04/24/kubernetes_control_plane_working.html" rel="alternate" type="text/html" title="Kubernetes Control-Plane Node에 Pod 띄울수 있는 방법 (Taints)" /><published>2019-04-24T18:21:42+09:00</published><updated>2019-04-24T18:21:42+09:00</updated><id>http://localhost:4000/kubernetes/2019/04/24/kubernetes_control_plane_working</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/04/24/kubernetes_control_plane_working.html">&lt;h3 id=&quot;kubernetes-control-plane-node에-pod-올리는-방법&quot;&gt;Kubernetes Control-Plane Node에 Pod 올리는 방법&lt;/h3&gt;

&lt;h4 id=&quot;1-control-plane-node에--pod를-올릴경우-아래처럼-pending-상태로-진행되지-않음-테스트를-위해-contrl-plane-node만-ready인-상태로-진행&quot;&gt;1) Control-Plane Node에  Pod를 올릴경우 아래처럼 Pending 상태로 진행되지 않음 (테스트를 위해 Contrl-Plane Node만 Ready인 상태로 진행)&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;deployment yaml 생성
    &lt;blockquote&gt;
      &lt;p&gt;$ vi nginx-deployment.yaml &lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Apply
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl apply -f nginx-deployment.yaml&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deployment.apps/nginx-deployment created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 상태 확인 (Pending 상태로 지속 됨)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl get pods&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-6dd86d77d-4rkhf   0/1     Pending   0          20m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 상태 자세히 확인  (Pod Name은 3. 참고)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl describe pod nginx-deployment-6dd86d77d-4rkhf&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name:               nginx-deployment-6dd86d77d-4rkhf                                     
Namespace:          default                                                              
.
... 생략
Events:                                                                                                                                        
  Type     Reason            Age                 From               Message                                                                    
  ----     ------            ----                ----               -------                                                                    
  Warning  FailedScheduling  43s (x17 over 22m)  default-scheduler  0/3 nodes are available: 3 node(s) had taints that the pod didn't tolerate.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-위처럼-pending-상태로-안올라오는-이유는-contrl-plane-node에-pod를-못-올리도록-설정되어-있기-때문&quot;&gt;2) 위처럼 Pending 상태로 안올라오는 이유는 Contrl-Plane Node에 Pod를 못 올리도록 설정되어 있기 때문&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Contrl-Plane Node 확인 (아래 master는 Contrl-Plane Node Name)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl describe node master | grep Taints&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Taints:             node-role.kubernetes.io/master:NoSchedule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3-pod를-올리고-싶을경우&quot;&gt;3) Pod를 올리고 싶을경우&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Taint 설정 해제
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl taint nodes –all node-role.kubernetes.io/master-&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node/master untainted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pod 상태 재조회 (자동으로 리스타트 됨)
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl get pods -o wide&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                               READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES
nginx-deployment-6dd86d77d-4rkhf   1/1     Running   0          35m   10.244.0.7   master   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;4-다시-pod를-못-올리도록-설정하고-싶은-경우&quot;&gt;4) 다시 Pod를 못 올리도록 설정하고 싶은 경우&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Taint 설정
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl taint nodes master node-role.kubernetes.io=master:NoSchedule&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node/master tainted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl describe node master | grep Taints&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Taints:             node-role.kubernetes.io=master:NoSchedule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">Kubernetes Control-Plane Node에 Pod 올리는 방법</summary></entry><entry><title type="html">Kubernetes 클러스터 설치 및 구성(kube 1.14.1, ubuntu 16.04)</title><link href="http://localhost:4000/kubernetes/2019/04/15/kubernetes_install_exec_14.01.html" rel="alternate" type="text/html" title="Kubernetes 클러스터 설치 및 구성(kube 1.14.1, ubuntu 16.04)" /><published>2019-04-15T11:21:42+09:00</published><updated>2019-04-15T11:21:42+09:00</updated><id>http://localhost:4000/kubernetes/2019/04/15/kubernetes_install_exec_14.01</id><content type="html" xml:base="http://localhost:4000/kubernetes/2019/04/15/kubernetes_install_exec_14.01.html">&lt;h3 id=&quot;kubernetes-1141-구성-방법-ubuntu-1604&quot;&gt;kubernetes 1.14.1 구성 방법 (ubuntu 16.04)&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;클러스터 구성 예시&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IP Address&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.56.101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;control-plane Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.56.102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Worker Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.56.103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Worker Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1-k8s-설치-전체-노드-실행&quot;&gt;1) k8s 설치 (전체 노드 실행)&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Docker 설치 : 지난 글 참고 “&lt;a href=&quot;/docker/2019/01/10/docker_swarm.html&quot;&gt;Docker 설치 참고 (docker-ce=18.06.1~ce~3-0~ubuntu)&lt;/a&gt;” &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;$ sudo apt install apt-transport-https&lt;/li&gt;
  &lt;li&gt;$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add&lt;/li&gt;
  &lt;li&gt;$ sudo add-apt-repository “deb https://apt.kubernetes.io/ kubernetes-$(lsb_release -cs) main”&lt;/li&gt;
  &lt;li&gt;$ sudo apt update&lt;/li&gt;
  &lt;li&gt;$ sudo apt install kubelet=1.14.1-00 kubeadm=1.14.1-00 kubectl=1.14.1-00 kubernetes-cni=0.7.5-00&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-control-plane-node-구-master-node-구성&quot;&gt;2) Control Plane Node (구 Master Node) 구성&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;kubeadm-config.yaml 파일 생성 (아래 control-plane-node 부분은 Bode IP나 HA구성을 할 경우 연결 시킬 LB 주소를 입력)
    &lt;blockquote&gt;
      &lt;p&gt;$ vi kubeadm-config.yaml&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: kubeadm.k8s.io/v1beta1
kind: ClusterConfiguration
kubernetesVersion: v1.14.1
controlPlaneEndpoint: 192.168.56.101:6443
networking:
  podSubnet: 10.244.0.0/16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;생성된 파일을 이용하여 초기화
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo kubeadm init –config=kubeadm-config.yaml –experimental-upload-certs&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;결과 : 
... 생략
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join 192.168.56.101:6443 --token tf9afj.p3hglea5pdk4v23m \
    --discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb01137e8e78 \
    --experimental-control-plane --certificate-key f4fdb1c3d25baa05eef7c5cd92f49e0d01425679da7871b760ddee33eaaddf57

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
&quot;kubeadm init phase upload-certs --experimental-upload-certs&quot; to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.56.101:6443 --token tf9afj.p3hglea5pdk4v23m \
    --discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb01137e8e78
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ mkdir -p $HOME/.kube &lt;br /&gt;
  $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config &lt;br /&gt;
  $ sudo chown $(id -u):$(id -g) $HOME/.kube/config &lt;br /&gt;
  :: kubectl 명령어를 사용하고 싶은 계정에서 실행 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ kubeadm join 192.168.56.101:6443 –token tf9afj.p3hglea5pdk4v13m \ &lt;br /&gt;
    –discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb0113123 \ &lt;br /&gt;
    –experimental-control-plane –certificate-key f4fdb1c3d25baa05eef7c5cd92f49e0d01425679da7871b760ddee33eaa123 &lt;br /&gt;
  :: 타 노드에서 Control-Plane Node로 HA로 구성하고 싶을 경우 실행 (전체가 한개의 명령어) &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ kubeadm join 192.168.56.101:6443 –token tf9afj.p3hglea5pdk4v13m \ &lt;br /&gt;
    –discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb0113123&lt;br /&gt;
  :: 타 노드에서 일반 Worker Node로 올릴 경우 실행 (전체가 한개의 명령어) &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;3-worker-node-구성&quot;&gt;3) Worker Node 구성&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;위 명령어 중
    &lt;blockquote&gt;
      &lt;p&gt;$ kubeadm join 192.168.56.101:6443 –token tf9afj.p3hglea5pdk4v13m \ &lt;br /&gt;
 –discovery-token-ca-cert-hash sha256:e46f607087a9daf7d30b9afd0ff4f5ec7c4eb41f49ca2f5ba271eb0113123 &lt;br /&gt;
  위 형식의 명령어를 실행 &lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;4-cluster-구성-확인-control-plane-node에서-실행&quot;&gt;4) Cluster 구성 확인 (Control-Plane Node에서 실행)&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;kubectl get nodes
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl get nodes&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME     STATUS     ROLES    AGE   VERSION
master   Ready      master   1h   v1.14.1
node1    Ready   &amp;lt;none&amp;gt;   1h   v1.14.1
node2    Ready   &amp;lt;none&amp;gt;   1h   v1.14.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;toubleshooting&quot;&gt;Toubleshooting&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;coredns가 안떠서 NotReady 상태인 경우
    &lt;blockquote&gt;
      &lt;p&gt;$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;running with swap on is not supported. Please disable swap 이 메세지가 뜰 경우
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo swapoff -a&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">kubernetes 1.14.1 구성 방법 (ubuntu 16.04)</summary></entry><entry><title type="html">Docker Swarm : 특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기 (constraint 옵션)</title><link href="http://localhost:4000/docker/2019/03/12/docker_constraint.html" rel="alternate" type="text/html" title="Docker Swarm : 특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기 (constraint 옵션)" /><published>2019-03-12T03:31:42+09:00</published><updated>2019-03-12T03:31:42+09:00</updated><id>http://localhost:4000/docker/2019/03/12/docker_constraint</id><content type="html" xml:base="http://localhost:4000/docker/2019/03/12/docker_constraint.html">&lt;h3 id=&quot;특정-조건hostname-role-labels-등을-지정하여-컨테이너-올리기&quot;&gt;특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기&lt;/h3&gt;
&lt;p&gt;예시) “node1” Node에만 컨테이너 올리기, Manager Node에만 컨테이너 올리기 등&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시 1) &quot;node1&quot; Node에만 컨테이너 올리기
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 2
      placement:
        constraints: [node.hostname == node1]
    networks:
      - nginx

networks:
  nginx:

user@master:/scloud/docker/yaml$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
lzc7bkkg9kpc        test_nginx          replicated          2/2                 nginx:latest        *:80-&amp;gt;80/tcp, *:443-&amp;gt;443/tcp
user@master:/scloud/docker/yaml$ docker service ps test_nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
lkxuit71s0l9        test_nginx.1        nginx:latest        node1               Running             Running 23 minutes ago
t357q0jes2sk        test_nginx.2        nginx:latest        node1               Running             Running 13 seconds ago


예시 2) Manager Node에만 컨테이너 올리기 (Manager Node : Master, Node2)
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
    networks:
      - nginx

networks:
  nginx:

user@master:/scloud/docker/yaml$ docker stack deploy -c docker-compose.yml test
Updating service test_nginx (id: lzc7bkkg9kpckr0je715iw0r4)

user@master:/scloud/docker/yaml$ docker service ps test_nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR               PORTS
2eao19s4q53m        test_nginx.1        nginx:latest        node2               Running             Running 19 seconds ago
lkxuit71s0l9         \_ test_nginx.1    nginx:latest        node1               Shutdown            Shutdown 20 seconds ago
ji20e0d966qq        test_nginx.2        nginx:latest        master              Running             Running 23 seconds ago
t357q0jes2sk         \_ test_nginx.2    nginx:latest        node1               Shutdown            Shutdown 24 seconds ago

user@master:/scloud/docker/yaml$ docker service ps test_nginx
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
2eao19s4q53m        test_nginx.1        nginx:latest        node2               Running             Running 4 minutes ago
ji20e0d966qq        test_nginx.2        nginx:latest        master              Running             Running 4 minutes ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;옵션 종류(https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-placement-preferences-placement-pref 참고)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;node&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;attribute&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;matches	example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.id&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Node ID&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.id==2ivku8v2gvtg4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.hostname&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Node hostname&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.hostname!=node-2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.role&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Node role&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.role==manager&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;user defined node labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node.labels.security==high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;engine.labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Docker Engine’s labels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;engine.labels.operatingsystem==ubuntu 14.04&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-placement-preferences-placement-pref&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">특정 조건(hostname, role, labels 등)을 지정하여 컨테이너 올리기 예시) “node1” Node에만 컨테이너 올리기, Manager Node에만 컨테이너 올리기 등</summary></entry><entry><title type="html">Docker Swarm : yaml 파일을 이용하여 Service 올리기</title><link href="http://localhost:4000/docker/2019/02/25/docker_swarm_stack_yaml.html" rel="alternate" type="text/html" title="Docker Swarm : yaml 파일을 이용하여 Service 올리기" /><published>2019-02-25T03:31:42+09:00</published><updated>2019-02-25T03:31:42+09:00</updated><id>http://localhost:4000/docker/2019/02/25/docker_swarm_stack_yaml</id><content type="html" xml:base="http://localhost:4000/docker/2019/02/25/docker_swarm_stack_yaml.html">&lt;h3 id=&quot;docker-swarm--yaml-파일을-이용하여-service-올리기&quot;&gt;Docker Swarm : yaml 파일을 이용하여 Service 올리기&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;(Manager Node) $ docker stack deploy [OPTIONS] STACK&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시) nginx 컨테이너 2EA 올리기
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 2
    networks:
      - nginx

networks:
  nginx:

user@master:/scloud/docker/yaml$ docker stack deploy --compose-file docker-compose.yml test
Creating network test_nginx
Creating service test_nginx

user@master:/scloud/docker/yaml$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
lzc7bkkg9kpc        test_nginx          replicated          2/2                 nginx:latest        *:80-&amp;gt;80/tcp, *:443-&amp;gt;443/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;추가 예시) 배포된 서비스에서 Scale 1EA로 변경하기
1. 위 yml파일에서 replicas &amp;gt; 1로 변경
2. $ docker stack deploy --compose-file docker-compose.yml test
아래 참고.
user@master:/scloud/docker/yaml$ cat docker-compose.yml
version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    deploy:
      replicas: 1
    networks:
      - nginx

networks:
  nginx:
user@master:/scloud/docker/yaml$ docker stack deploy -c docker-compose.yml test
Updating service test_nginx (id: lzc7bkkg9kpckr0je715iw0r4)
user@master:/scloud/docker/yaml$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
lzc7bkkg9kpc        test_nginx          replicated          1/1                 nginx:latest        *:80-&amp;gt;80/tcp, *:443-&amp;gt;443/tcp

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/stack_deploy/&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm : yaml 파일을 이용하여 Service 올리기 (Manager Node) $ docker stack deploy [OPTIONS] STACK</summary></entry><entry><title type="html">Docker Swarm : Worker Node를 Manager Node로 승격시키기</title><link href="http://localhost:4000/docker/2019/02/05/docker_swarm_promote.html" rel="alternate" type="text/html" title="Docker Swarm : Worker Node를 Manager Node로 승격시키기" /><published>2019-02-05T01:31:42+09:00</published><updated>2019-02-05T01:31:42+09:00</updated><id>http://localhost:4000/docker/2019/02/05/docker_swarm_promote</id><content type="html" xml:base="http://localhost:4000/docker/2019/02/05/docker_swarm_promote.html">&lt;h3 id=&quot;docker-swarm--worker-nodenode2를-manager-node로-승격시키기&quot;&gt;Docker Swarm : Worker Node(Node2)를 Manager Node로 승격시키기&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;(Manager Node에서 실행) $ docker node promote NODE [NODE…]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시)
user@master:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
oczmgznj47bd58abjmrql4gc5 *   master              Ready               Active              Leader              18.06.1-ce
z0afqkd570azc1pppxg1b6gsl     node1               Ready               Active                                  18.06.1-ce
zuz034mvcr2owqb7q4zgw3dn2     node2               Ready               Active                                  18.06.1-ce

user@master:~$ docker node promote node2
Node node2 promoted to a manager in the swarm.

user@master:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
oczmgznj47bd58abjmrql4gc5 *   master              Ready               Active              Leader              18.06.1-ce
z0afqkd570azc1pppxg1b6gsl     node1               Ready               Active                                  18.06.1-ce
zuz034mvcr2owqb7q4zgw3dn2     node2               Ready               Active              Reachable           18.06.1-ce

user@node2:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
f1ii0n7slud7        nginx_service       replicated          1/1                 nginx:latest

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/node_promote/&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm : Worker Node(Node2)를 Manager Node로 승격시키기 (Manager Node에서 실행) $ docker node promote NODE [NODE…]</summary></entry><entry><title type="html">Docker Swarm : Scale In-Out 명령어</title><link href="http://localhost:4000/docker/2019/01/17/docker_scale_swarm_in_out.html" rel="alternate" type="text/html" title="Docker Swarm : Scale In-Out 명령어" /><published>2019-01-17T12:31:42+09:00</published><updated>2019-01-17T12:31:42+09:00</updated><id>http://localhost:4000/docker/2019/01/17/docker_scale_swarm_in_out</id><content type="html" xml:base="http://localhost:4000/docker/2019/01/17/docker_scale_swarm_in_out.html">&lt;h3 id=&quot;docker-swarm-scale-in-out&quot;&gt;Docker Swarm Scale In-Out&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ docker service scale SERVICE=REPLICAS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예시)
0EA로 Scale In $ docker service scale nginx_service=0
3EA로 Scale Out $ docker service scale nginx_service=3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고사이트 &lt;br /&gt;
Docker : https://docs.docker.com/engine/reference/commandline/service_scale/&lt;/p&gt;</content><author><name></name></author><category term="docker" /><summary type="html">Docker Swarm Scale In-Out $ docker service scale SERVICE=REPLICAS</summary></entry></feed>